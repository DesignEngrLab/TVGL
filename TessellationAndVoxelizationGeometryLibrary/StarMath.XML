<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StarMath</name>
    </assembly>
    <members>
        <member name="T:StarMathLib.StarMath">
            <summary>
            The main class in the StarMathLib. All functions are static
            functions located here.
            </summary>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Multiplies all elements of a 1D double array with the double value.
            </summary>
            <param name="B">The double vector to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <returns>A 1D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)">
            <summary>
            Multiplies all elements of a 1D double array with the double value.
            </summary>
            <param name="B">The double vector to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <param name="length">The length of the vector.</param>
            <returns>A 1D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Multiplies all elements of a 1D double array with the double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <param name="B">The double vector to be multiplied with</param>
            <returns>A 1D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Multiplies all elements of a 1D double array with the double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <param name="B">The double vector to be multiplied with</param>
            <param name="length">The length of the vector B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A 1D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Double)">
            <summary>
            Multiplies all elements of a 1D integer array with the double value.
            </summary>
            <param name="B">The integer vector to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <returns>A 1D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Double,System.Int32)">
            <summary>
            Multiplies all elements of a 1D integer array with the double value.
            </summary>
            <param name="B">The integer vector to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <param name="length">The length of the vector.</param>
            <returns>A 1D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Multiplies all elements of a 1D integer array with the double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <param name="B">The integer vector to be multiplied with</param>
            <returns>A 1D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Multiplies all elements of a 1D integer array with the double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <param name="B">The integer vector to be multiplied with</param>
            <param name="length">The length of the vector B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A 1D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Multiplies all elements of a 1D integer array with the integer value.
            </summary>
            <param name="B">The integer vector to be multiplied with</param>
            <param name="a">The integer value to be multiplied</param>
            <returns>A 1D integer array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Multiplies all elements of a 1D integer array with the integer value.
            </summary>
            <param name="B">The integer vector to be multiplied with</param>
            <param name="a">The integer value to be multiplied</param>
            <param name="length">The length.</param>
            <returns>A 1D integer array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Multiplies all elements of a 1D integer array with the integer value.
            </summary>
            <param name="a">The integer value to be multiplied</param>
            <param name="B">The integer vector to be multiplied with</param>
            <returns>A 1D integer array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32,System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Multiplies all elements of a 1D integer array with the integer value.
            </summary>
            <param name="a">The integer value to be multiplied</param>
            <param name="B">The integer vector to be multiplied with</param>
            <param name="length">The length of the vector B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A 1D integer array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Divides all elements of a 1D double array by the double value.
            </summary>
            <param name="B">The vector to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <returns>A 1D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)">
            <summary>
            Divides all elements of a 1D double array by the double value.
            </summary>
            <param name="B">The vector to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <param name="length">The length of the vector B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A 1D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Collections.Generic.IList{System.Int32},System.Double)">
            <summary>
            Divides all elements of a 1D integer array by the double value.
            </summary>
            <param name="B">The vector to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <returns>A 1D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Collections.Generic.IList{System.Int32},System.Double,System.Int32)">
            <summary>
            Divides all elements of a 1D integer array by the double value.
            </summary>
            <param name="B">The vector to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <param name="length">The length of the vector B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A 1D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Double)">
            <summary>
            Multiplies all elements of a 2D double array with a double value.
            </summary>
            <param name="B">The matrix to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <returns>A 2D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Double[0:,0:])">
            <summary>
            Multiplies all elements of a 2D double array with a double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <param name="B">The matrix to be multiplied with</param>
            <returns>A 2D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Double,System.Int32,System.Int32)">
            <summary>
            Multiplies all elements of a 2D double array with a double value.
            </summary>
            <param name="B">The matrix to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A 2D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Multiplies all elements of a 2D double array with a double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <param name="B">The matrix to be multiplied with</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A 2D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Double)">
            <summary>
            Multiplies all elements of a 2D int array with a double value.
            </summary>
            <param name="B">The matrix to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <returns>A 2D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Int32[0:,0:])">
            <summary>
            Multiplies all elements of a 2D int array with a double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <param name="B">The matrix to be multiplied with</param>
            <returns>A 2D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Double,System.Int32,System.Int32)">
            <summary>
            Multiplies all elements of a 2D int array with a double value.
            </summary>
            <param name="B">The matrix to be multiplied with</param>
            <param name="a">The double value to be multiplied</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A 2D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double,System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Multiplies all elements of a 2D int array with a double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <param name="B">The matrix to be multiplied with</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A 2D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Int32)">
            <summary>
            Multiplies all elements of a 2D integer array with a integer value.
            </summary>
            <param name="B">The matrix to be multiplied with</param>
            <param name="a">The integer value to be multiplied</param>
            <returns>A 2D integer array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32,System.Int32[0:,0:])">
            <summary>
            Multiplies all elements of a 2D integer array with a integer value.
            </summary>
            <param name="a">The integer value to be multiplied</param>
            <param name="B">The matrix to be multiplied with</param>
            <returns>A 2D integer array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Multiplies all elements of a 2D integer array with a integer value.
            </summary>
            <param name="B">The matrix to be multiplied with</param>
            <param name="a">The integer value to be multiplied</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A 2D integer array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32,System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Multiplies all elements of a 2D integer array with a integer value.
            </summary>
            <param name="a">The integer value to be multiplied</param>
            <param name="B">The matrix to be multiplied with</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A 2D integer array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Double[0:,0:],System.Double)">
            <summary>
            Divides all elements of a 2D double array by the double value.
            </summary>
            <param name="B">The matrix to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <returns>A 2D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Double[0:,0:],System.Double,System.Int32,System.Int32)">
            <summary>
            Divides all elements of a 2D double array by the double value.
            </summary>
            <param name="B">The matrix to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A 2D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Int32[0:,0:],System.Double)">
            <summary>
            Divides all elements of a 2D integer array by the double value.
            </summary>
            <param name="B">The matrix to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <returns>A 2D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.divide(System.Int32[0:,0:],System.Double,System.Int32,System.Int32)">
            <summary>
            Divides all elements of a 2D integer array by the double value.
            </summary>
            <param name="B">The matrix to be divided</param>
            <param name="a">The double value to be divided by, the divisor.</param>
            <param name="numRows">The number of rows. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <param name="numCols">The number of cols. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A 2D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.dotProduct(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The dot product of the two 1D double vectors A and B
            </summary>
            <param name="A">1D double Array, A</param>
            <param name="B">1D double Array, B</param>
            <returns>A double value that contains the dot product</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.dotProduct(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            The dot product of the two 1D double vectors A and B
            </summary>
            <param name="A">1D double Array, A</param>
            <param name="B">1D double Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A double value that contains the dot product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.dotProduct(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            The dot product of the one 1D int vector and one 1D double vector
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D double Array, B</param>
            <returns>A double value that contains the dot product</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.dotProduct(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            The dot product of the one 1D int vector and one 1D double vector
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D double Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A double value that contains the dot product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.dotProduct(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The dot product of the two 1D int vectors A and B
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D int Array, B</param>
            <returns>A double value that contains the dot product</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.dotProduct(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            The dot product of the two 1D int vectors A and B
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D int Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A double value that contains the dot product</returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The cross product of two double-precision vectors, A and B,
            </summary>
            <param name="A">1D double Array, A</param>
            <param name="B">1D double Array, B</param>
            <returns>A double value that contains the dot product</returns>
            <exception cref="T:System.ArithmeticException">Cross product is only possible for vectors of length: 1, 3, or 7</exception>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            The cross product of an integer vector, A, and a double vector, B.
            </summary>
            <param name="A">1D integer Array, A</param>
            <param name="B">1D double Array, B</param>
            <returns>A double value that contains the dot product</returns>
            <exception cref="T:System.ArithmeticException">Cross product is only possible for vectors of length: 1, 3, or 7</exception>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The cross product of an double vector, A, and a integer vector, B.
            </summary>
            <param name="A">1D double Array, A</param>
            <param name="B">1D integer Array, B</param>
            <returns>A double value that contains the dot product</returns>
            <exception cref="T:System.ArithmeticException">Cross product is only possible for vectors of length: 1, 3, or 7</exception>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The cross product of two integer vectors, A and B.
            </summary>
            <param name="A">1D integer Array, A</param>
            <param name="B">1D integer Array, B</param>
            <returns>A double value that contains the dot product</returns>
            <exception cref="T:System.ArithmeticException">Cross product is only possible for vectors of length: 1, 3, or 7</exception>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct2(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The cross product of two double vectors, A and B, which are of length, 2.
            In actuality, there is no cross-product for 2D. This is shorthand for 2D systems
            that are really simplifications of 3D. The returned scalar is actually the value in
            the third (read: z) direction.
            </summary>
            <param name="A">1D double Array, A</param>
            <param name="B">1D double Array, B</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.ArithmeticException">This cross product \shortcut\ is only used with 2D vectors to get the single value in the,
                                            + would be, Z-direction.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct2(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            The cross product of an integer vector, A, and a double vector, B, which are of length, 2.
            In actuality, there is no cross-product for 2D. This is shorthand for 2D systems
            that are really simplifications of 3D. The returned scalar is actually the value in
            the third (read: z) direction.
            </summary>
            <param name="A">1D integer Array, A</param>
            <param name="B">1D double Array, B</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.ArithmeticException">This cross product \shortcut\ is only used with 2D vectors to get the single value in the,
                                            + would be, Z-direction.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct2(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The cross product of an double vector, A, and a integer vector, B, which are of length, 2.
            In actuality, there is no cross-product for 2D. This is shorthand for 2D systems
            that are really simplifications of 3D. The returned scalar is actually the value in
            the third (read: z) direction.
            </summary>
            <param name="A">1D double Array, A</param>
            <param name="B">1D integer Array, B</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.ArithmeticException">This cross product \shortcut\ is only used with 2D vectors to get the single value in the,
                                            + would be, Z-direction.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct2(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The cross product of two integer vectors, A and B, which are of length, 2.
            In actuality, there is no cross-product for 2D. This is shorthand for 2D systems
            that are really simplifications of 3D. The returned scalar is actually the value in
            the third (read: z) direction.
            </summary>
            <param name="A">1D integer Array, A</param>
            <param name="B">1D integer Array, B</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArithmeticException">This cross product \shortcut\ is only used with 2D vectors to get the single value in the,
                                            + would be, Z-direction.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct7(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Crosses the product7.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct7(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            Crosses the product7.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct7(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Crosses the product7.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct7(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Crosses the product7.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct3(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Crosses the product3.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct3(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            Crosses the product3.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct3(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Crosses the product3.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.crossProduct3(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Crosses the product3.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D double) with each element of array-2 (1D double)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name="A">1D double array - column vector (1 element per row)</param>
            <param name="B">1D double array - row vector (1 element column)</param>
            <returns>2D double array product matrix, value of element [i,j] = A[i] * B[j]</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D int) with each element of array-2 (1D double)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name="A">1D integer array - column vector (1 element per row)</param>
            <param name="B">1D double array - row vector (1 element column)</param>
            <returns>2D double array product matrix, value of element [i,j] = A[i] * B[j]</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D int) with each element of array-2 (1D double)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name="A">1D double array - column vector (1 element per row)</param>
            <param name="B">1D integer array - row vector (1 element column)</param>
            <returns>2D double array product matrix, value of element [i,j] = A[i] * B[j]</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D int) with each element of array-2 (1D int)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name="A">1D integer array - column vector (1 element per row)</param>
            <param name="B">1D integer array - row vector (1 element column)</param>
            <returns>2D double array product matrix, value of element [i,j] = A[i] * B[j]</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D double) with each element of array-2 (1D double)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name="A">1D double array - column vector (1 element per row)</param>
            <param name="B">1D double array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of colimns.</param>
            <returns>2D double array product matrix, value of element [i,j] = A[i] * B[j]</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D int) with each element of array-2 (1D double)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name="A">1D integer array - column vector (1 element per row)</param>
            <param name="B">1D double array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of colimns.</param>
            <returns>2D double array product matrix, value of element [i,j] = A[i] * B[j]</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D int) with each element of array-2 (1D double)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name="A">1D double array - column vector (1 element per row)</param>
            <param name="B">1D integer array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of colimns.</param>
            <returns>2D double array product matrix, value of element [i,j] = A[i] * B[j]</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyVectorsIntoAMatrix(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Multiply vector by transpose of another vector to create a matrix.
            Product of each element of array-1 (1D int) with each element of array-2 (1D int)
            C[i,j] = A[i] * B[j]
            </summary>
            <param name="A">1D integer array - column vector (1 element per row)</param>
            <param name="B">1D integer array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of colimns.</param>
            <returns>2D double array product matrix, value of element [i,j] = A[i] * B[j]</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D double Array, A</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Double[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D double Array, A</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Int32[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D int Array, A</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D int Array, A</param>
            <returns>A 2D int array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D double Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D double Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D int Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D int Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 2D int array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Collections.Generic.IList{System.Double})">
            <summary>
            Product of a matrix and a vector (2D double and 1D double)
            </summary>
            <param name="A">2D double Array</param>
            <param name="B">1D double array - column vector (1 element row)</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Collections.Generic.IList{System.Double})">
            <summary>
            Product of a matrix and a vector (2D double and 1D double)
            </summary>
            <param name="A">2D int Array</param>
            <param name="B">1D double array - column vector (1 element row)</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Product of two matrices (2D double and 1D double)
            </summary>
            <param name="A">2D double Array</param>
            <param name="B">1D int array - column vector (1 element row)</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Product of two matrices (2D double and 1D double)
            </summary>
            <param name="A">2D int Array</param>
            <param name="B">1D int array - column vector (1 element row)</param>
            <returns>A 1D int array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Double},System.Double[0:,0:])">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name="B">2D double Array</param>
            <param name="A">1D double array - row vector (1 element column)</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Double},System.Int32[0:,0:])">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name="B">2D int Array</param>
            <param name="A">1D double array - row vector (1 element column)</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Double[0:,0:])">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name="B">2D double Array</param>
            <param name="A">1D int array - row vector (1 element column)</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Int32[0:,0:])">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name="B">2D int Array</param>
            <param name="A">1D int array - row vector (1 element column)</param>
            <returns>A 1D int array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Product of a matrix and a vector (2D double and 1D double)
            </summary>
            <param name="A">2D double Array</param>
            <param name="B">1D double array - column vector (1 element row)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Product of a matrix and a vector (2D double and 1D double)
            </summary>
            <param name="A">2D int Array</param>
            <param name="B">1D double array - column vector (1 element row)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double and 1D double)
            </summary>
            <param name="A">2D double Array</param>
            <param name="B">1D int array - column vector (1 element row)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double and 1D double)
            </summary>
            <param name="A">2D int Array</param>
            <param name="B">1D int array - column vector (1 element row)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 1D int array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Double},System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name="B">2D double Array</param>
            <param name="A">1D double array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Double},System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name="B">2D int Array</param>
            <param name="A">1D double array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name="B">2D double Array</param>
            <param name="A">1D int array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 1D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Collections.Generic.IList{System.Int32},System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (1D double and 2D double)
            </summary>
            <param name="B">2D int Array</param>
            <param name="A">1D int array - row vector (1 element column)</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 1D int array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The element-by-element of the two 1D double vectors A and B
            </summary>
            <param name="A">1D double Array, A</param>
            <param name="B">1D double Array, B</param>
            <returns>A double value that contains the element-by-element</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            The element-by-element of the two 1D double vectors A and B
            </summary>
            <param name="A">1D double Array, A</param>
            <param name="B">1D double Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A double value that contains the element-by-element</returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            The element-by-element of the one 1D int vector and one 1D double vector
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D double Array, B</param>
            <returns>A double value that contains the element-by-element</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            The element-by-element of the one 1D int vector and one 1D double vector
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D double Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A double value that contains the element-by-element</returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The element-by-element of the two 1D int vectors A and B
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D int Array, B</param>
            <returns>A double value that contains the element-by-element</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            The element-by-element of the two 1D int vectors A and B
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D int Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A double value that contains the element-by-element</returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D double Array, A</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Int32[0:,0:],System.Double[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D double Array, A</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Double[0:,0:],System.Int32[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D int Array, A</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D int Array, A</param>
            <returns>A 2D int array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Double[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D double Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Int32[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D double Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Double[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D int Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltMultiply(System.Int32[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D int Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 2D int array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltDivide(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            The element-by-element of the two 1D double vectors A and B
            </summary>
            <param name="A">1D double Array, A</param>
            <param name="B">1D double Array, B</param>
            <returns>A double value that contains the element-by-element</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltDivide(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            The element-by-element of the two 1D double vectors A and B
            </summary>
            <param name="A">1D double Array, A</param>
            <param name="B">1D double Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A double value that contains the element-by-element</returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltDivide(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            The element-by-element of the one 1D int vector and one 1D double vector
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D double Array, B</param>
            <returns>A double value that contains the element-by-element</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltDivide(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            The element-by-element of the one 1D int vector and one 1D double vector
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D double Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A double value that contains the element-by-element</returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltDivide(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            The element-by-element of the two 1D int vectors A and B
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D int Array, B</param>
            <returns>A double value that contains the element-by-element</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltDivide(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            The element-by-element of the two 1D int vectors A and B
            </summary>
            <param name="A">1D int Array, A</param>
            <param name="B">1D int Array, B</param>
            <param name="length">The length of both vectors A and B. This is an optional argument, but if it is already known
            - there is a slight speed advantage to providing it.</param>
            <returns>A double value that contains the element-by-element</returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltDivide(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D double Array, A</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltDivide(System.Int32[0:,0:],System.Double[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D double Array, A</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltDivide(System.Double[0:,0:],System.Int32[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D int Array, A</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltDivide(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D int Array, A</param>
            <returns>A 2D int array that is the product of the two matrices A and B</returns>
            <exception cref="T:System.ArithmeticException">Column count in first matrix must be equal to row count in second matrix</exception>
        </member>
        <member name="M:StarMathLib.StarMath.EltDivide(System.Double[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D double Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltDivide(System.Int32[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D double Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltDivide(System.Double[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D int Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 2D double array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.EltDivide(System.Int32[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Product of two matrices (2D double)
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D int Array, A</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>A 2D int array that is the product of the two matrices A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.KronProduct(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the Kronecker product of the two matrices.
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D double Array, A</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.KronProduct(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Returns the Kronecker product of the two matrices.
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D int Array, A</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.KronProduct(System.Double[0:,0:],System.Int32[0:,0:])">
            <summary>
            Returns the Kronecker product of the two matrices.
            </summary>
            <param name="A">2D double Array, A</param>
            <param name="B">2D int Array, A</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.KronProduct(System.Int32[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the Kronecker product of the two matrices.
            </summary>
            <param name="A">2D int Array, A</param>
            <param name="B">2D double Array, A</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="P:StarMathLib.StarMath.PrintCellWidth">
            <summary>
                The cell width
            </summary>
        </member>
        <member name="P:StarMathLib.StarMath.PrintNumDecimals">
            <summary>
                The number decimals
            </summary>
        </member>
        <member name="P:StarMathLib.StarMath.MaxErrorForUsingGaussSeidel">
            <summary>
                The maximum error for using gauss seidel
            </summary>
        </member>
        <member name="P:StarMathLib.StarMath.GaussSeidelMaxError">
            <summary>
                The gauss seidel maximum error
            </summary>
        </member>
        <member name="P:StarMathLib.StarMath.GaussSeidelDiagonalDominanceRatio">
            <summary>
                The gauss seidel diagonal dominance ratio
            </summary>
        </member>
        <member name="P:StarMathLib.StarMath.GaussSeidelMinimumMatrixSize">
            <summary>
                The gauss seidel minimum matrix size
            </summary>
        </member>
        <member name="P:StarMathLib.StarMath.GaussSeidelMaxIterationFactor">
            <summary>
                The gauss seidel maximum iteration factor
            </summary>
        </member>
        <member name="P:StarMathLib.StarMath.GaussSeidelRelaxationOmega">
            <summary>
                The gauss seidel relaxation omega
            </summary>
        </member>
        <member name="P:StarMathLib.StarMath.MaxSvDiter">
            <summary>
                The maximum sv diter
            </summary>
        </member>
        <member name="P:StarMathLib.StarMath.StartingCarolSeed">
            <summary>
                The starting carol seed
            </summary>
        </member>
        <member name="P:StarMathLib.StarMath.EqualityTolerance">
            <summary>
                Gets or sets the  tolerance for the equality functions: IsPracticallySame, IsNegligible, IsGreaterThanNonNegligible
                IsLessThanNonNegligible.
            </summary>
            <value>The equality tolerance.</value>
        </member>
        <member name="M:StarMathLib.StarMath.IsPracticallySame(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether [is practically same] [the specified x].
            the norm is within 1e-15
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="optionalTolerance">An optional tolerance.</param>
            <returns><c>true</c> if [is practically same] [the specified x]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.IsPracticallySame(System.Double[],System.Double[],System.Double)">
            <summary>
            Determines whether [is practically same] [the specified x].
            the norm is within 1e-15
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="optionalTolerance">An optional tolerance.</param>
            <returns><c>true</c> if [is practically same] [the specified x]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.IsNegligible(System.Double[],System.Double)">
            <summary>
            Determines whether the specified x is negligible (|x| lte 1e-15).
            </summary>
            <param name="x">The x.</param>
            <param name="optionalTolerance">An optional tolerance.</param>
            <returns><c>true</c> if the specified x is negligible; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.IsNegligible(System.Double,System.Double)">
            <summary>
            Determines whether the specified x is negligible (|x| lte 1e-15).
            </summary>
            <param name="x">The x.</param>
            <param name="optionalTolerance">An optional tolerance.</param>
            <returns><c>true</c> if the specified x is negligible; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.IsGreaterThanNonNegligible(System.Double,System.Double)">
            <summary>
                Determines whether [is greater than] [the specified y] and not practically the same.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns><c>true</c> if [is greater than non negligible] [the specified y]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.IsLessThanNonNegligible(System.Double,System.Double)">
            <summary>
                Determines whether [is less than] [the specified y] and not practically the same.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns><c>true</c> if [is less than non negligible] [the specified y]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Double[0:,0:],StarMathLib.SparseMatrix)">
            <summary>
            Adds the specified SparseMatrix, B, to this 2D double array to create a new
            2D double array.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Double[0:,0:],StarMathLib.SparseMatrix)">
            <summary>
            Subtracts the specified SparseMatrix, B, to this 2D double array to create a new
            2D double array.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiply(System.Double[0:,0:],StarMathLib.SparseMatrix)">
            <summary>
            Product of two matrices (2D double and a SparseMatrix)
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:StarMathLib.StarMath.multiplyToSparse(System.Double[0:,0:],StarMathLib.SparseMatrix)">
            <summary>
            Product of two matrices (2D double and a SparseMatrix), which results in a 
            new sparse matrix.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns>SparseMatrix.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:StarMathLib.StarMath.SingularValueDecomposition(System.Double[0:,0:])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="A">The matrix in question, A can be rectangular m-by-n.</param>
            <returns>The singular values of A in ascending value, often indicated as sigma (provided as a vector).</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SingularValueDecomposition(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="A">The matrix in question, A can be rectangular [m, n]</param>
            <param name="U">The m-by-m uitary matrix that pre-multiplies the singular values.</param>
            <param name="V">The n-by-n conjugate transpose matrix of V that post-multiplies the singular values.</param>
            <returns>The singular values of A in ascending value, often indicated as sigma (provided as a vector).</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SingularValueDecomposition(System.Int32[0:,0:])">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="A">The matrix in question, A can be rectangular m-by-n.</param>
            <returns>The singular values of A in ascending value, often indicated as sigma (provided as a vector).</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SingularValueDecomposition(System.Int32[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Computes the singular value decomposition of A.
            </summary>
            <param name="A">The matrix in question, A can be rectangular [m, n]</param>
            <param name="U">The m-by-m uitary matrix that pre-multiplies the singular values.</param>
            <param name="V">The n-by-n conjugate transpose matrix of V that post-multiplies the singular values.</param>
            <returns>The singular values of A in ascending value, often indicated as sigma (provided as a vector).</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SingularValueDecomposition(System.Boolean,System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@)">
            <summary>
            Singulars the value decomposition.
            </summary>
            <param name="computeVectors">if set to <c>true</c> [compute vectors].</param>
            <param name="A">a.</param>
            <param name="u">The u.</param>
            <param name="vt">The vt.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">SVD did not converge.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.fromCartesianToPolar(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Given the Cartesian coordinates (x, y) of a point p, these function return the parameters da, db, c, and s
            associated with the Givens rotation that zeros the y-coordinate of the point.
            </summary>
            <param name="x">Provides the x-coordinate of the point p. On exit contains the parameter r associated with the Givens
            rotation</param>
            <param name="y">Provides the y-coordinate of the point p. On exit contains the parameter z associated with the Givens
            rotation</param>
            <param name="cosAngle">Contains the parameter c associated with the Givens rotation</param>
            <param name="sinAngle">Contains the parameter s associated with the Givens rotation</param>
            <remarks>This is equivalent to the DROTG LAPACK routine.</remarks>
        </member>
        <member name="M:StarMathLib.StarMath.Translate(System.Double,System.Double,System.Double)">
            <summary>
                Creates a translated coordinate frame.
            </summary>
            <param name="tx">Amount of translation in x.</param>
            <param name="ty">Amount of translation in y.</param>
            <param name="tz">Amount of translation in z.</param>
            <returns>4-by-4 matrix translated by the amount specified.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.RotationX(System.Double,System.Boolean)">
            <summary>
                Creates a rotation matrix about the X-axis.
            </summary>
            <param name="angle">The amount of angle in degrees (positive is counter-clockwise).</param>
            <param name="inRadians">if set to <c>true</c> [in radians].</param>
            <returns>4-by-4 matrix rotated by the amount specified.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.RotationY(System.Double,System.Boolean)">
            <summary>
                Creates a rotation matrix about the Y-axis.
            </summary>
            <param name="angle">The amount of angle in degrees (positive is counter-clockwise).</param>
            <param name="inRadians">if set to <c>true</c> [in radians].</param>
            <returns>4-by-4 matrix rotated by the amount specified.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.RotationZ(System.Double,System.Boolean)">
            <summary>
                Creates a rotation matrix about the Z-axis.
            </summary>
            <param name="angle">The amount of angle in degrees (positive is counter-clockwise).</param>
            <param name="inRadians">if set to <c>true</c> [in radians].</param>
            <returns>4-by-4 matrix rotated by the amount specified.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
                Adds arrays A and B
            </summary>
            <param name="A">1D double array 1</param>
            <param name="B">1D double array 2</param>
            <returns>1D double array that contains sum of vectros A and B</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
                Adds arrays A and B
            </summary>
            <param name="A">1D int array 1</param>
            <param name="B">1D double array 2</param>
            <returns>1D double array that contains sum of vectros A and B</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
                Adds arrays A and B
            </summary>
            <param name="A">1D int array 1</param>
            <param name="B">1D int array 2</param>
            <returns>1D integer array that contains sum of vectros A and B</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
                Adds arrays A and B
            </summary>
            <param name="A">2D double array 1</param>
            <param name="B">2D double array 2</param>
            <returns>2D double array that contains sum of vectros A and B</returns>
            <exception cref="T:System.ArithmeticException">
                Matrix row count do not match
                or
                Matrix column count do not match
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Int32[0:,0:],System.Double[0:,0:])">
            <summary>
                Adds arrays A and B
            </summary>
            <param name="A">2D double array 1</param>
            <param name="B">2D int array 2</param>
            <returns>2D double array that contains sum of vectros A and B</returns>
            <exception cref="T:System.ArithmeticException">
                Matrix row count do not match
                or
                Matrix column count do not match
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
                Adds arrays A and B
            </summary>
            <param name="A">2D integer array 1</param>
            <param name="B">2D integer array 2</param>
            <returns>2D integer array that contains sum of vectros A and B</returns>
            <exception cref="T:System.ArithmeticException">
                Matrix row count do not match
                or
                Matrix column count do not match
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
                Adds arrays A and B
            </summary>
            <param name="A">1D double array 1</param>
            <param name="B">1D double array 2</param>
            <param name="length">The length of the array.</param>
            <returns>1D double array that contains sum of vectros A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
                Adds arrays A and B
            </summary>
            <param name="A">1D int array 1</param>
            <param name="B">1D double array 2</param>
            <param name="length">The length of the array.</param>
            <returns>1D double array that contains sum of vectros A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
                Adds arrays A and B
            </summary>
            <param name="A">1D int array 1</param>
            <param name="B">1D int array 2</param>
            <param name="length">The length of the array.</param>
            <returns>1D integer array that contains sum of vectros A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Double[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
                Adds arrays A and B
            </summary>
            <param name="A">2D double array 1</param>
            <param name="B">2D double array 2</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>2D double array that contains sum of vectros A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Int32[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
                Adds arrays A and B
            </summary>
            <param name="A">2D double array 1</param>
            <param name="B">2D int array 2</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>2D double array that contains sum of vectros A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.add(System.Int32[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
                Adds arrays A and B
            </summary>
            <param name="A">2D integer array 1</param>
            <param name="B">2D integer array 2</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>2D integer array that contains sum of vectros A and B</returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
                Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D double)</param>
            <param name="B">The subtrahend vector, B (1D double)</param>
            <returns>Returns the difference vector, C (1D double)</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
                Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D int)</param>
            <param name="B">The subtrahend vector, B (1D double)</param>
            <returns>Returns the difference vector, C (1D double)</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
                Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D double)</param>
            <param name="B">The subtrahend vector, B (1D int)</param>
            <returns>Returns the difference vector, C (1D double)</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
                Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D int)</param>
            <param name="B">The subtrahend vector, B (1D int)</param>
            <returns>Returns the difference vector, C (1D int)</returns>
            <exception cref="T:System.ArithmeticException">Matrix sizes do not match</exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
                Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D double).</param>
            <param name="B">The subtrahend matrix, B (2D double).</param>
            <returns>Returns the difference matrix, C (2D double)</returns>
            <exception cref="T:System.ArithmeticException">
                Matrix row count do not match
                or
                Matrix column count do not match
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Int32[0:,0:],System.Double[0:,0:])">
            <summary>
                Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D int).</param>
            <param name="B">The subtrahend matrix, B (2D double).</param>
            <returns>Returns the difference matrix, C (2D double)</returns>
            <exception cref="T:System.ArithmeticException">
                Matrix row count do not match
                or
                Matrix column count do not match
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Double[0:,0:],System.Int32[0:,0:])">
            <summary>
                Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D double).</param>
            <param name="B">The subtrahend matrix, B (2D int).</param>
            <returns>Returns the difference matrix, C (2D double)</returns>
            <exception cref="T:System.ArithmeticException">
                Matrix row count do not match
                or
                Matrix column count do not match
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
                Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D integer).</param>
            <param name="B">The subtrahend matrix, B (2D integer).</param>
            <returns>Returns the difference matrix, C (2D integer)</returns>
            <exception cref="T:System.ArithmeticException">
                Matrix row count do not match
                or
                Matrix column count do not match
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
                Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D double)</param>
            <param name="B">The subtrahend vector, B (1D double)</param>
            <param name="length">The length of the vectors.</param>
            <returns>Returns the difference vector, C (1D double)</returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
                Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D int)</param>
            <param name="B">The subtrahend vector, B (1D double)</param>
            <param name="length">The length of the vectors.</param>
            <returns>Returns the difference vector, C (1D double)</returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
                Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D double)</param>
            <param name="B">The subtrahend vector, B (1D int)</param>
            <param name="length">The length of the vectors.</param>
            <returns>Returns the difference vector, C (1D double)</returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
                Subtracts one vector (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend vector, A (1D int)</param>
            <param name="B">The subtrahend vector, B (1D int)</param>
            <param name="length">The length of the vectors.</param>
            <returns>Returns the difference vector, C (1D int)</returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Double[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
                Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D double).</param>
            <param name="B">The subtrahend matrix, B (2D double).</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>Returns the difference matrix, C (2D double)</returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Int32[0:,0:],System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
                Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D int).</param>
            <param name="B">The subtrahend matrix, B (2D double).</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>Returns the difference matrix, C (2D double)</returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Double[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
                Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D double).</param>
            <param name="B">The subtrahend matrix, B (2D int).</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>Returns the difference matrix, C (2D double)</returns>
        </member>
        <member name="M:StarMathLib.StarMath.subtract(System.Int32[0:,0:],System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
                Subtracts one matrix (B) from the other (A). C = A - B.
            </summary>
            <param name="A">The minuend matrix, A (2D integer).</param>
            <param name="B">The subtrahend matrix, B (2D integer).</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>Returns the difference matrix, C (2D integer)</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetEigenValues(System.Double[0:,0:])">
            <summary>
                Gets the eigenvalues for matrix, A.
            </summary>
            <param name="A">the matrix in question, A.</param>
            <returns>
                The eigenvalues as two arrays of same length/order as A
                (the first is the real component, the second is the imaginary component).
            </returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetEigenValuesAndVectors(System.Double[0:,0:],System.Double[][]@)">
            <summary>
                Gets the eigenvalues and eigenvectors for matrix, A.
            </summary>
            <param name="A">the matrix in question, A.</param>
            <param name="eigenVectors">The eigenvectors as an array of arrays/vectors.</param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Double[0:,0:])">
            <summary>
            Finds the maximum value in the given 2D double array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>A double value that is the maximum of A</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Double[0:,0:],System.Int32@,System.Int32@)">
            <summary>
            Finds the maximum value in the given 2D double array and returns the row and column indices along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the col.</param>
            <returns>the maximum value</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Int32[0:,0:])">
            <summary>
            Finds the maximum value in the given 2D integer array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>An integer value that is the maximum of A</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Int32[0:,0:],System.Int32@,System.Int32@)">
            <summary>
            Finds the maximum value in the given 2D double array and returns the row and column indices along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the col.</param>
            <returns>the maximum value</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Double[0:,0:])">
            <summary>
            Finds the minimum value in the given 2D double array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>A double value that is the minimum of A</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Double[0:,0:],System.Int32@,System.Int32@)">
            <summary>
            Finds the minimum value in the given 2D double array and returns the row and column indices along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the col.</param>
            <returns>the minimum value</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Int32[0:,0:])">
            <summary>
            Finds the minimum value in the given 2D integer array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>An integer value that is the minimum of A</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Int32[0:,0:],System.Int32@,System.Int32@)">
            <summary>
            Finds the minimum value in the given 2D double array and returns the row and column indices along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the col.</param>
            <returns>the minimum value</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Finds the maximum value in the given 1D integer array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>An integer value that is the maximum of A</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Finds the minimum value in the given 1D integer array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>An integer value that is the minimum of A</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Collections.Generic.IList{System.Double})">
            <summary>
            Finds the maximum value in the given 1D double array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>An double value that is the maximum of A</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Collections.Generic.IList{System.Double})">
            <summary>
            Finds the minimum value in the given 1D double array
            </summary>
            <param name="A">The array to be searched for</param>
            <returns>An double value that is the minimum of A</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Collections.Generic.IList{System.Double},System.Int32@)">
            <summary>
            Finds the minimum value in the given 1D double array and returns its index along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="index">The index.</param>
            <returns>the minimum value</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Collections.Generic.IList{System.Double},System.Int32@)">
            <summary>
            Finds the minimum value in the given 1D double array and returns its index along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="index">The index.</param>
            <returns>the maximum value</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Min(System.Collections.Generic.IList{System.Int32},System.Int32@)">
            <summary>
            Finds the minimum value in the given 1D double array and returns its index along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="index">The index.</param>
            <returns>the minimum value</returns>
        </member>
        <member name="M:StarMathLib.StarMath.Max(System.Collections.Generic.IList{System.Int32},System.Int32@)">
            <summary>
            Finds the minimum value in the given 1D double array and returns its index along with it.
            </summary>
            <param name="A">The array to be searched for</param>
            <param name="index">The index.</param>
            <returns>the maximum value</returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Finds all the indices for the specified find value.
            </summary>
            <param name="A">The A.</param>
            <param name="FindVal">The find value.</param>
            <returns>IList&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Finds all the indices for the specified find value.
            </summary>
            <param name="FindVal">The find value.</param>
            <param name="A">The A.</param>
            <returns>IList&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Finds all the indices for the specified find value.
            </summary>
            <param name="A">The A.</param>
            <param name="FindVal">The find value.</param>
            <returns>IList&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Finds all the indices for the specified find value.
            </summary>
            <param name="FindVal">The find value.</param>
            <param name="A">The A.</param>
            <returns>IList&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Double[0:,0:],System.Double)">
            <summary>
            Finds the [rowIndex, colIndex] for the specified find value.
            </summary>
            <param name="A">The A.</param>
            <param name="FindVal">The find value.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Double,System.Double[0:,0:])">
            <summary>
            Finds the [rowIndex, colIndex] for the specified find value.
            </summary>
            <param name="FindVal">The find value.</param>
            <param name="A">The A.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Int32[0:,0:],System.Int32)">
            <summary>
            Finds the [rowIndex, colIndex] for the specified find value.
            </summary>
            <param name="A">The A.</param>
            <param name="FindVal">The find value.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.find(System.Int32,System.Int32[0:,0:])">
            <summary>
            Finds the [rowIndex, colIndex] for the specified find value.
            </summary>
            <param name="FindVal">The find value.</param>
            <param name="A">The A.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.inverse(System.Double[0:,0:])">
            <summary>
            Inverses the matrix A only if the diagonal is all non-zero.
            A[i,i] != 0.0
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <returns>The inverted matrix, A^-1.</returns>
            <exception cref="T:System.ArithmeticException">Matrix cannnot be inverted. Can only invert sqare matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.inverse(System.Int32[0:,0:])">
            <summary>
            Inverses the matrix A only if the diagonal is all non-zero.
            A[i,i] != 0.0
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <returns>The inverted matrix, A^-1.</returns>
            <exception cref="T:System.ArithmeticException">Matrix cannnot be inverted. Can only invert sqare matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.inverseWithLUResult(System.Double[0:,0:],System.Int32[],System.Int32)">
            <summary>
            Inverses the with lu result.
            </summary>
            <param name="B">The b.</param>
            <param name="permute">The permute.</param>
            <param name="length">The length.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.LUDecomposition(System.Double[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@,System.Int32[]@)">
            <summary>
            Returns the LU decomposition of A in a new matrix.
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <param name="L">The L matrix is output where the diagonal elements are included and not (necessarily) equal to one.</param>
            <param name="U">The U matrix is output where the diagonal elements are all equal to one.</param>
            <param name="permute">The permute.</param>
            <exception cref="T:System.ArithmeticException">Matrix cannot be inverted. Can only invert sqyare matrices.</exception>
            <exception cref="T:System.ArithmeticException">LU Decomposition can only be determined for square matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.LUDecomposition(System.Double[0:,0:],System.Int32[]@,System.Int32,System.Boolean,System.Int32[])">
            <summary>
            Returns the LU decomposition of A in a new matrix.
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <param name="permutationVector">The resulting permutation vector - how the rows are re-ordered to
            create L and U.</param>
            <param name="length">The length/order/number of rows of matrix, A.</param>
            <param name="robustReorder">if set to <c>true</c> [robust reorder]. But this is an internal recursive call
            and should not be set outside.</param>
            <param name="lastZeroIndices">The last zero indices - is calculated in this function, but if it is already
            known, then...by all means.</param>
            <returns>A matrix of equal size to A that combines the L and U. Here the diagonals belongs to L and the U's diagonal
            elements are all 1.</returns>
            <exception cref="T:System.ArithmeticException">LU Decomposition can only be determined for square matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.LUDecomposition(System.Int32[0:,0:],System.Double[0:,0:]@,System.Double[0:,0:]@,System.Int32[]@)">
            <summary>
            Returns the LU decomposition of A in a new matrix.
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <param name="L">The L matrix is output where the diagonal elements are included and not (necessarily) equal to one.</param>
            <param name="U">The U matrix is output where the diagonal elements are all equal to one.</param>
            <param name="permute">The permute.</param>
            <exception cref="T:System.ArithmeticException">LU Decomposition can only be determined for square matrices.</exception>
            <exception cref="T:System.ArithmeticException">LU Decomposition can only be determined for square matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.LUDecomposition(System.Int32[0:,0:],System.Int32[]@,System.Int32,System.Boolean,System.Int32[])">
            <summary>
            Returns the LU decomposition of A in a new matrix.
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <param name="permutationVector">The resulting permutation vector - how the rows are re-ordered to
            create L and U.</param>
            <param name="length">The length/order/number of rows of matrix, A.</param>
            <param name="robustReorder">if set to <c>true</c> [robust reorder]. But this is an internal recursive call
            and should not be set outside.</param>
            <param name="lastZeroIndices">The last zero indices - is calculated in this function, but if it is already
            known, then...by all means.</param>
            <returns>A matrix of equal size to A that combines the L and U. Here the diagonals belongs to L and the U's diagonal
            elements are all 1.</returns>
            <exception cref="T:System.ArithmeticException">LU Decomposition can only be determined for square matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.CholeskyDecomposition(System.Double[0:,0:],System.Boolean)">
            <summary>
            Returns the Cholesky decomposition of A in a new matrix. The new matrix is a lower triangular matrix, and
            the diagonals are the D matrix in the L-D-LT formulation. To get the L-LT format.
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <param name="NoSeparateDiagonal">if set to <c>true</c> [no separate diagonal].</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">Matrix cannot be inverted. Can only invert square matrices.</exception>
            <exception cref="T:System.ArithmeticException">Matrix cannot be inverted. Can only invert square matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.CholeskyDecomposition(System.Int32[0:,0:],System.Boolean)">
            <summary>
            Returns the Cholesky decomposition of A in a new matrix. The new matrix is a lower triangular matrix, and
            the diagonals are the D matrix in the L-D-LT formulation. To get the L-LT format.
            </summary>
            <param name="A">The matrix to invert. This matrix is unchanged by this function.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">Matrix cannot be inverted. Can only invert square matrices.</exception>
            <exception cref="T:System.ArithmeticException">Cholesky Decomposition can only be determined for square matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.transpose(System.Double[0:,0:])">
            <summary>
            Transposes the matrix, A.
            </summary>
            <param name="A">The matrix to transpose. This matrix is unchanged by this function.</param>
            <returns>The transpose of A.</returns>
            <exception cref="T:System.ArithmeticException">The matrix, A, is null.</exception>
            <exception cref="T:System.ArithmeticException">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.transpose(System.Int32[0:,0:])">
            <summary>
            Transposes the matrix, A.
            </summary>
            <param name="A">The matrix to transpose. This matrix is unchanged by this function.</param>
            <returns>The transpose of A.</returns>
            <exception cref="T:System.ArithmeticException">The matrix, A, is null.</exception>
            <exception cref="T:System.ArithmeticException">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.determinant(System.Double[0:,0:])">
            <summary>
            Returns the determinant of matrix, A.
            </summary>
            <param name="A">The input argument matrix. This matrix is unchanged by this function.</param>
            <returns>a single value representing the matrix's determinant.</returns>
            <exception cref="T:System.ArithmeticException">The matrix, A, is null.
            or
            The determinant is only possible for square matrices.</exception>
            <exception cref="T:System.ArithmeticException">The matrix, A, is null.
            or
            The determinant is only possible for square matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.determinantBig(System.Double[0:,0:],System.Int32)">
            <summary>
            Determinants the big.
            </summary>
            <param name="A">a.</param>
            <param name="length">The length.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.determinant(System.Int32[0:,0:])">
            <summary>
            Returns the determinant of matrix, A.
            </summary>
            <param name="A">The input argument matrix. This matrix is unchanged by this function.</param>
            <returns>a single value representing the matrix's determinant.</returns>
            <exception cref="T:System.ArithmeticException">The matrix, A, is null.
            or
            The determinant is only possible for square matrices.</exception>
            <exception cref="T:System.ArithmeticException">The matrix, A, is null.
            or
            The determinant is only possible for square matrices.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.determinantBig(System.Int32[0:,0:],System.Int32)">
            <summary>
            Returns the determinant of matrix, A. Only used internally for matrices larger than 3.
            </summary>
            <param name="A">The input argument matrix. This matrix is unchanged by this function.</param>
            <param name="length">The length of the side of the square matrix.</param>
            <returns>a single value representing the matrix's determinant.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.makeZero(System.Int32)">
            <summary>
            Makes a square matrix of size p by p of all zeros.
            </summary>
            <param name="p">The size (number of both rows and columns).</param>
            <returns>an empty (all zeros) square matrix (2D double).</returns>
            <exception cref="T:System.ArithmeticException">The size, p, must be a positive integer.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeZeroInt(System.Int32)">
            <summary>
            Makes a sqare matrix of size p by p of all zeros.
            </summary>
            <param name="p">The size (number of both rows and columns).</param>
            <returns>an empty (all zeros) square matrix (2D int).</returns>
            <exception cref="T:System.ArithmeticException">The size, p, must be a positive integer.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeZeroVector(System.Int32)">
            <summary>
            Makes the zero vector.
            </summary>
            <param name="p">The p.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">The size, p, must be a positive integer.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeZeroIntVector(System.Int32)">
            <summary>
            Makes the zero int vector.
            </summary>
            <param name="p">The p.</param>
            <returns>System.Int32[].</returns>
            <exception cref="T:System.ArithmeticException">The size, p, must be a positive integer.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeZero(System.Int32,System.Int32)">
            <summary>
            Makes a matrix of size numRows by numCols of all zeros.
            </summary>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>an empty (all zeros) matrix.</returns>
            <exception cref="T:System.ArithmeticException">The number of rows, numRows, must be a positive integer.
            or
            The number of columns, numCols, must be a positive integer.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeZeroInt(System.Int32,System.Int32)">
            <summary>
            Makes a matrix of size numRows by numCols of all zeros.
            </summary>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>an empty (all zeros) matrix.</returns>
            <exception cref="T:System.ArithmeticException">The number of rows, numRows, must be a positive integer.
            or
            The number of columns, numCols, must be a positive integer.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeIdentity(System.Int32)">
            <summary>
            Makes an identity matrix of size p by p.
            </summary>
            <param name="p">The size (number of both rows and columns).</param>
            <returns>the identity matrix, I.</returns>
            <exception cref="T:System.ArithmeticException">The size, p, must be a positive integer.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeIdentityInt(System.Int32)">
            <summary>
            Makes an identity matrix of size p by p.
            </summary>
            <param name="p">The size (number of both rows and columns).</param>
            <returns>the identity matrix, I.</returns>
            <exception cref="T:System.ArithmeticException">The size, p, must be a positive integer.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.makeLinearProgression(System.Double,System.Double,System.Double)">
            <summary>
            Makes a linear progression from start to, but not including, the end.
            </summary>
            <param name="end">The end value (which will not be reached).</param>
            <param name="interval">The interval amount between values.</param>
            <param name="start">The starting value (the value of the first element).</param>
            <returns>Returns a double array with a series of numbers starting from start until the end
            with a distance of the interval between any pair of numbers.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.makeLinearProgression(System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes a linear progression from start to, but not including, the end.
            </summary>
            <param name="end">The end value (which will not be reached).</param>
            <param name="interval">The interval amount between values.</param>
            <param name="start">The starting value (the value of the first element).</param>
            <returns>Returns an integer array with a series of numbers starting from start until the end
            with a distance of the interval between any pair of numbers.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.makeLinearProgression(System.Double,System.Int32,System.Double)">
            <summary>
            Makes a linear progression from start to, but not including, the end.
            </summary>
            <param name="end">The end value (which will not be reached).</param>
            <param name="numElements">The number of elements.</param>
            <param name="start">The starting value (the value of the first element).</param>
            <returns>Returns a double array with a series of numbers starting from start until the end
            with a distance of the interval between any pair of numbers.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.ConvertDenseToSparseMatrix(System.Double[0:,0:],System.Double)">
            <summary>
            Converts the 2D double array to a Sparse matrix.
            </summary>
            <param name="A">a.</param>
            <param name="optionalTolerance">An optional tolerance.</param>
            <returns>SparseMatrix.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumn(System.Double[0:,0:],System.Int32)">
            <summary>
            Gets the column of matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="colIndex">The column index.</param>
            <returns>A double array that contains the requested column</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumn(System.Int32[0:,0:],System.Int32)">
            <summary>
            Gets the column of matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="colIndex">The column index.</param>
            <returns>A double array that contains the requested column</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumn(System.Int32,System.Double[0:,0:])">
            <summary>
            Gets a column of matrix, A.
            </summary>
            <param name="colIndex">The column index.</param>
            <param name="A">The matrix, A.</param>
            <returns>A double array that contains the requested column</returns>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of 
                                                + colIndex
                                                +  for getColumn is not in required range from 0 up to (but not including) 
                                                + numRows + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumn(System.Int32,System.Int32[0:,0:])">
            <summary>
            Gets a column of matrix, A.
            </summary>
            <param name="colIndex">The column index.</param>
            <param name="A">The matrix, A.</param>
            <returns>A double array that contains the requested column</returns>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of 
                                                + colIndex
                                                +  for getColumn is not in required range from 0 up to (but not including) 
                                                + numRows + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumns(System.Double[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Get more than one column from a given 2D double array.
            </summary>
            <param name="A">2D double array from which columns need to be extracted</param>
            <param name="ColumnList">The column list indices.</param>
            <returns>A  2D double array that contains all the requested columns</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumns(System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Get more than one column from a given 2D int array.
            </summary>
            <param name="A">2D int array from which columns need to be extracted</param>
            <param name="ColumnList">The column list indices.</param>
            <returns>A  2D int array that contains all the requested columns</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumns(System.Collections.Generic.IList{System.Int32},System.Double[0:,0:])">
            <summary>
            Get more than one column from a given 2D double array.
            </summary>
            <param name="ColumnList">The column list indices.</param>
            <param name="A">2D double array from which columns need to be extracted</param>
            <returns>A  2D double array that contains all the requested columns</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetColumns(System.Collections.Generic.IList{System.Int32},System.Int32[0:,0:])">
            <summary>
            Get more than one column from a given 2D double array.
            </summary>
            <param name="ColumnList">The column list indices.</param>
            <param name="A">2D int array from which columns need to be extracted</param>
            <returns>A  2D int array that contains all the requested columns</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetRow(System.Double[0:,0:],System.Int32)">
            <summary>
            Gets a row of matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="rowIndex">The row index.</param>
            <returns>A double array that contains the requested row</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetRow(System.Int32[0:,0:],System.Int32)">
            <summary>
            Gets a row of matrix, A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="rowIndex">The row index.</param>
            <returns>A double array that contains the requested row</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetRow(System.Int32,System.Double[0:,0:])">
            <summary>
            Gets a row of matrix, A.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="A">The matrix, A.</param>
            <returns>A double array that contains the requested row</returns>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of 
                                                + rowIndex
                                                +  for getRow is not in required range from 0 up to (but not including) 
                                                + numRows + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.GetRow(System.Int32,System.Int32[0:,0:])">
            <summary>
            Gets a row of matrix, A.
            </summary>
            <param name="rowIndex">The row index.</param>
            <param name="A">The matrix, A.</param>
            <returns>A double array that contains the requested row</returns>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of 
                                                + rowIndex
                                                +  for getRow is not in required range from 0 up to (but not including) 
                                                + numRows + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.GetRows(System.Double[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Get more than one row from a given 2D double array.
            </summary>
            <param name="A">2D double array from which rows need to be extracted</param>
            <param name="RowList">The row list indices.</param>
            <returns>A  2D double array that contains all the requested rows</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetRows(System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Get more than one row from a given 2D int array.
            </summary>
            <param name="A">2D int array from which rows need to be extracted</param>
            <param name="RowList">The row list indices.</param>
            <returns>A  2D int array that contains all the requested rows</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetRows(System.Collections.Generic.IList{System.Int32},System.Double[0:,0:])">
            <summary>
            Get more than one row from a given 2D double array.
            </summary>
            <param name="RowList">The row list indices.</param>
            <param name="A">2D double array from which rows need to be extracted</param>
            <returns>A  2D double array that contains all the requested rows</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetRows(System.Collections.Generic.IList{System.Int32},System.Int32[0:,0:])">
            <summary>
            Get more than one row from a given 2D double array.
            </summary>
            <param name="RowList">The row list indices.</param>
            <param name="A">2D int array from which rows need to be extracted</param>
            <returns>A  2D int array that contains all the requested rows</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SetRow(System.Double[0:,0:],System.Int32,System.Collections.Generic.IList{System.Double})">
            <summary>
            Sets/Replaces the given row of matrix A with the vector v.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="rowIndex">The index of the row, rowIndex.</param>
            <param name="v">The vector, v.</param>
        </member>
        <member name="M:StarMathLib.StarMath.SetRow(System.Int32[0:,0:],System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Sets/Replaces the given row of matrix A with the vector v.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="rowIndex">The index of the row, rowIndex.</param>
            <param name="v">The vector, v.</param>
        </member>
        <member name="M:StarMathLib.StarMath.SetRow(System.Int32,System.Double[0:,0:],System.Collections.Generic.IList{System.Double})">
            <summary>
            Sets/Replaces the given row of matrix A with the vector v.
            </summary>
            <param name="rowIndex">The index of the row, rowIndex.</param>
            <param name="A">The matrix, A.</param>
            <param name="v">The vector, v.</param>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of 
                                                + rowIndex
                                                +  for getRow is not in required range from 0 up to (but not including) 
                                                + numRows + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.SetRow(System.Int32,System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Sets/Replaces the given row of matrix A with the vector v.
            </summary>
            <param name="rowIndex">The index of the row, rowIndex.</param>
            <param name="A">The matrix, A.</param>
            <param name="v">The vector, v.</param>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of 
                                                + rowIndex
                                                +  for getRow is not in required range from 0 up to (but not including) 
                                                + numRows + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.SetColumn(System.Double[0:,0:],System.Int32,System.Collections.Generic.IList{System.Double})">
            <summary>
            Sets/Replaces the given column of matrix A with the vector v.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="colIndex">The index of the column, rowIndex.</param>
            <param name="v">The vector, v.</param>
        </member>
        <member name="M:StarMathLib.StarMath.SetColumn(System.Int32[0:,0:],System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Sets/Replaces the given column of matrix A with the vector v.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="colIndex">The index of the column, rowIndex.</param>
            <param name="v">The vector, v.</param>
        </member>
        <member name="M:StarMathLib.StarMath.SetColumn(System.Int32,System.Double[0:,0:],System.Collections.Generic.IList{System.Double})">
            <summary>
            Sets/Replaces the given column of matrix A with the vector v.
            </summary>
            <param name="colIndex">Index of the col.</param>
            <param name="A">The A.</param>
            <param name="v">The v.</param>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of 
                                                + colIndex
                                                +  for getColumn is not in required range from 0 up to (but not including) 
                                                + numCols + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.SetColumn(System.Int32,System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Sets/Replaces the given column of matrix A with the vector v.
            </summary>
            <param name="colIndex">Index of the col.</param>
            <param name="A">The A.</param>
            <param name="v">The v.</param>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of 
                                                + colIndex
                                                +  for getColumn is not in required range from 0 up to (but not including) 
                                                + numCols + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.RemoveRow(System.Double[0:,0:],System.Int32)">
            <summary>
            Removes the given row of matrix A with the vector v.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="rowIndex">The index of the row, rowIndex.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of 
                                                + rowIndex
                                                +  for RemoveRow is not in required range from 0 up to (but not including) 
                                                + numRows + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.RemoveRow(System.Int32[0:,0:],System.Int32)">
            <summary>
            Removes the given row of matrix A with the vector v.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="rowIndex">The index of the row, rowIndex.</param>
            <returns>System.Int32[].</returns>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of 
                                                + rowIndex
                                                +  for RemoveRow is not in required range from 0 up to (but not including) 
                                                + numRows + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.RemoveColumn(System.Double[0:,0:],System.Int32)">
            <summary>
            Removes the given column of matrix A with the vector v.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="colIndex">The index of the column, rowIndex.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of 
                                                + colIndex
                                                +  for RemoveColumn is not in required range from 0 up to (but not including) 
                                                + numCols + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.RemoveColumn(System.Int32[0:,0:],System.Int32)">
            <summary>
            Removes the given column of matrix A with the vector v.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="colIndex">The index of the column, rowIndex.</param>
            <returns>System.Int32[].</returns>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of 
                                                + colIndex
                                                +  for RemoveColumn is not in required range from 0 up to (but not including) 
                                                + numCols + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.RemoveRows(System.Double[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Removes the given row of matrix A with the vector v.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="rowIndices">The row indices.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">
            StarMath Size Error: A row index, with value  + rowIndices.Max() +
                                                , in the provided rowIndices for RemoveRows exceeds the number of rows (number of rows =  +
                                                numRows +
                                                ) in the provided matrix.
            or
            StarMath Size Error: An there are more rows to remove (rowIndices.Count =  +
                                                rowIndices.Count +
                                                ) than there are rows in the matrix provided to RemoveRows (number of rows =  +
                                                numRows + ).
            </exception>
        </member>
        <member name="M:StarMathLib.StarMath.RemoveRows(System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Removes the given rows of matrix A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="rowIndices">The row indices.</param>
            <returns>System.Int32[].</returns>
            <exception cref="T:System.ArithmeticException">
            StarMath Size Error: A row index, with value  + rowIndices.Max() +
                                                , in the provided rowIndices for RemoveRows exceeds the number of rows (number of rows =  +
                                                numRows +
                                                ) in the provided matrix.
            or
            StarMath Size Error: An there are more rows to remove (rowIndices.Count =  +
                                                rowIndices.Count +
                                                ) than there are rows in the matrix provided to RemoveRows (number of rows =  +
                                                numRows + ).
            </exception>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: A row index, with value  + rowIndices.Max() +
            , in the provided rowIndices for RemoveRows exceeds the number of rows (number of rows =  + numRows +
            ) in the provided matrix.
            or
            StarMath Size Error: An there are more rows to remove (rowIndices.Count =  + rowIndices.Count +
            ) than there are rows in the matrix provided to RemoveRows (number of rows =  + numRows + ).</exception>
        </member>
        <member name="M:StarMathLib.StarMath.RemoveColumns(System.Double[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Removes the given columns of matrix A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="colIndices">The col indices.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">
            StarMath Size Error: A row index, with value  + colIndices.Max() +
                                                , in the provided rowIndices for RemoveColumns exceeds the number of rows (number of rows =  +
                                                numCols +
                                                ) in the provided matrix.
            or
            StarMath Size Error: An there are more rows to remove (rowIndices.Count = 
                                                + colIndices.Count +
                                                ) than there are rows in the matrix provided to RemoveColumns (number of rows =  +
                                                numCols + ).
            </exception>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: A row index, with value  + colIndices.Max() +
            , in the provided rowIndices for RemoveColumns exceeds the number of rows (number of rows =  + numCols +
            ) in the provided matrix.
            or
            StarMath Size Error: An there are more rows to remove (rowIndices.Count =
            + colIndices.Count +
            ) than there are rows in the matrix provided to RemoveColumns (number of rows =  + numCols + ).</exception>
        </member>
        <member name="M:StarMathLib.StarMath.RemoveColumns(System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32})">
            <summary>
            Removes the given columns of matrix A.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="colIndices">The col indices.</param>
            <returns>System.Int32[].</returns>
            <exception cref="T:System.ArithmeticException">
            StarMath Size Error: A row index, with value  + colIndices.Max() +
                                                , in the provided rowIndices for RemoveColumns exceeds the number of rows (number of rows =  +
                                                numCols +
                                                ) in the provided matrix.
            or
            StarMath Size Error: An there are more rows to remove (rowIndices.Count = 
                                                + colIndices.Count +
                                                ) than there are rows in the matrix provided to RemoveColumns (number of rows =  +
                                                numCols + ).
            </exception>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: A row index, with value  + colIndices.Max() +
            , in the provided rowIndices for RemoveColumns exceeds the number of rows (number of rows =  + numCols +
            ) in the provided matrix.
            or
            StarMath Size Error: An there are more rows to remove (rowIndices.Count =
            + colIndices.Count +
            ) than there are rows in the matrix provided to RemoveColumns (number of rows =  + numCols + ).</exception>
        </member>
        <member name="M:StarMathLib.StarMath.GetPartialVector(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Get some portion of a vector and put in a new vector.
            </summary>
            <param name="A">1D double array from which elements need to be extracted</param>
            <param name="indexList">The indices of the elements.</param>
            <returns>A single 1D double array that contains all the requested elements.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.GetPartialVector(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Get some portion of a vector and put in a new vector.
            </summary>
            <param name="A">1D double array from which elements need to be extracted</param>
            <param name="indexList">The indices of the elements.</param>
            <returns>A single 1D double array that contains all the requested elements.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.RemoveVectorCell(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Removes the given entry of vector A.
            </summary>
            <param name="A">The vector, A.</param>
            <param name="index">The index to remove.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of 
                                                + index
                                                +  for RemoveVectorCell is not in required range from 0 up to (but not including) 
                                                + length + .</exception>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of
            + index
            +  for RemoveVectorCell is not in required range from 0 up to (but not including)
            + length + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.RemoveVectorCell(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Removes the given entry of vector A.
            </summary>
            <param name="A">The vector, A.</param>
            <param name="index">The index to remove.</param>
            <returns>System.Int32[].</returns>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of 
                                                + index
                                                +  for RemoveVectorCell is not in required range from 0 up to (but not including) 
                                                + length + .</exception>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of
            + index
            +  for RemoveVectorCell is not in required range from 0 up to (but not including)
            + length + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.RemoveVectorCells(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Removes the given entry of vector A.
            </summary>
            <param name="A">The vector, A.</param>
            <param name="indices">The indices.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">
            StarMath Size Error: A cell index, with value  + indices.Max() +
                                                , in the provided indices for RemoveVectorCells exceeds the number of entries (size =  +
                                                length +
                                                ) in the provided vector.
            or
            StarMath Size Error: There are more cells to remove (Count =  + indices.Count +
                                                ) than there are cells in the vector provided to RemoveVectorCells (Count =  +
                                                length + ).
            </exception>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of
            + index
            +  for RemoveVectorCell is not in required range from 0 up to (but not including)
            + length + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.RemoveVectorCells(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Removes the given entry of vector A.
            </summary>
            <param name="A">The vector, A.</param>
            <param name="indices">The indices.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">
            StarMath Size Error: A cell index, with value  + indices.Max() +
                                                , in the provided indices for RemoveVectorCells exceeds the number of entries (size =  +
                                                length +
                                                ) in the provided vector.
            or
            StarMath Size Error: There are more cells to remove (Count =  + indices.Count +
                                                ) than there are cells in the vector provided to RemoveVectorCells (Count =  +
                                                length + ).
            </exception>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: An index value of
            + index
            +  for RemoveVectorCell is not in required range from 0 up to (but not including)
            + length + .</exception>
        </member>
        <member name="M:StarMathLib.StarMath.JoinCol(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Jions two 2D double arrays side by side and returns the results. The given variables remain unchanged
            </summary>
            <param name="Matrix1">The Matrix that comes on the left.</param>
            <param name="Matrix2">Matrix that is attached to the right</param>
            <returns>A 2D double array that has Matrix1 and Matrix2 side by side</returns>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: Row dimensions do not match for matrix1 and matrix2</exception>
        </member>
        <member name="M:StarMathLib.StarMath.JoinRow(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Joins two 2D double arrays one under the other and returns the results. The given variables remain unchanged
            </summary>
            <param name="Matrix1">The Matrix that comes on the top.</param>
            <param name="Matrix2">Matrix that is attached to the bottom</param>
            <returns>A 2D double array that has Matrix1 and Matrix2 one below the other</returns>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: Column dimensions do not match for matrix1 and matrix2</exception>
        </member>
        <member name="M:StarMathLib.StarMath.JoinCol(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Jions two 2D int arrays side by side and returns the results. The given variables remain unchanged
            </summary>
            <param name="Matrix1">The Matrix that comes on the left.</param>
            <param name="Matrix2">Matrix that is attached to the right</param>
            <returns>A 2D int array that has Matrix1 and Matrix2 side by side</returns>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: Row dimensions do not match for matrix1 and matrix2</exception>
        </member>
        <member name="M:StarMathLib.StarMath.JoinRow(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Joins two 2D int arrays one under the other and returns the results. The given variables remain unchanged
            </summary>
            <param name="Matrix1">The Matrix that comes on the top.</param>
            <param name="Matrix2">Matrix that is attached to the bottom</param>
            <returns>A 2D int array that has Matrix1 and Matrix2 one below the other</returns>
            <exception cref="T:System.ArithmeticException">StarMath Size Error: Column dimensions do not match for matrix1 and matrix2</exception>
        </member>
        <member name="M:StarMathLib.StarMath.JoinVectors(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Concatenates two 1D double arrays and returns the result. The given variables remain unchanged
            </summary>
            <param name="Array1">Array that comes first.</param>
            <param name="Array2">Array that is appended to the end of the first array</param>
            <returns>An double array that has Array1 and Array2 side by side</returns>
        </member>
        <member name="M:StarMathLib.StarMath.JoinVectors(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Concatenates two 1D integer arrays and returns the result. The given variables remain unchanged
            </summary>
            <param name="Array1">Array that comes to the left.</param>
            <param name="Array2">Array that is appended to the end of the first array</param>
            <returns>An integer array that has Array1 and Array2 side by side</returns>
        </member>
        <member name="M:StarMathLib.StarMath.JoinMatrixColumnsIntoVector(System.Double[0:,0:])">
            <summary>
            Joins the matrix columns into vector.
            </summary>
            <param name="A">The matrix of doubles, A.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.JoinMatrixColumnsIntoVector(System.Int32[0:,0:])">
            <summary>
            Joins the matrix columns into vector.
            </summary>
            <param name="A">The matrix of integers, A.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.JoinMatrixRowsIntoVector(System.Double[0:,0:])">
            <summary>
            Joins the matrix rows into vector.
            </summary>
            <param name="A">The matrix of doubles, A.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.JoinMatrixRowsIntoVector(System.Int32[0:,0:])">
            <summary>
            Joins the matrix rows into vector.
            </summary>
            <param name="A">The matrix of integers, A.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.DistinctVectors(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Removes any duplicates in the List of vectors and returns just the distinct cases.
            The order is preserved with duplicates removed.
            </summary>
            <param name="list">The list.</param>
            <returns>List&lt;System.Double[]&gt;.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.DistinctVectors(System.Collections.Generic.List{System.Int32[]})">
            <summary>
            Removes any duplicates in the List of vectors and returns just the distinct cases.
            The order is preserved with duplicates removed.
            </summary>
            <param name="list">The list.</param>
            <returns>List&lt;System.Int32[]&gt;.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the vector, x.
            </summary>
            <param name="x">The vector, x.</param>
            <returns>Scalar value of 1-norm.</returns>
            <exception cref="T:System.ArithmeticException">The vector, x, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the vector, x.
            </summary>
            <param name="x">The vector, x.</param>
            <returns>Scalar value of 1-norm.</returns>
            <exception cref="T:System.ArithmeticException">The vector, x, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <returns>Scalar value of 1-norm.</returns>
            <exception cref="T:System.ArithmeticException">The vector, x, is null.
            or
            The vector, y, is null.
            or
            The vectors are not the same size.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <param name="length">The length of the vector.</param>
            <returns>Scalar value of 1-norm.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <returns>Scalar value of 1-norm.</returns>
            <exception cref="T:System.ArithmeticException">The vector, x, is null.
            or
            The vector, y, is null.
            or
            The vectors are not the same size.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <param name="length">The length of the vector.</param>
            <returns>Scalar value of 1-norm.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Double[0:,0:])">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the matrix, A.
            </summary>
            <param name="a">The matrix, A.</param>
            <returns>Scalar value of 1-norm.</returns>
            <exception cref="T:System.ArithmeticException">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the matrix, A.
            </summary>
            <param name="a">The matrix, A.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>Scalar value of 1-norm.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Int32[0:,0:])">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the matrix, A.
            </summary>
            <param name="a">The matrix, A.</param>
            <returns>Scalar value of 1-norm.</returns>
            <exception cref="T:System.ArithmeticException">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm1(System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns to 1-norm (sum of absolute values of all terms)
            of the matrix, A.
            </summary>
            <param name="a">The matrix, A.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <returns>Scalar value of 1-norm.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>Scalar value of 2-norm.</returns>
            <exception cref="T:System.ArithmeticException">The vector, x, is null.
            or
            The vector, y, is null.
            or
            The vectors are not the same size.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32,System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <param name="length">The length of the vectors.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>Scalar value of 2-norm.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>Scalar value of 2-norm.</returns>
            <exception cref="T:System.ArithmeticException">The vector, x, is null.
            or
            The vector, y, is null.
            or
            The vectors are not the same size.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the difference between x and y.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="y">The vector, y.</param>
            <param name="length">The length of the vectors.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>Scalar value of 2-norm.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Collections.Generic.IEnumerable{System.Double},System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the vector, x.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>Scalar value of 2-norm.</returns>
            <exception cref="T:System.ArithmeticException">The vector, x, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the vector, x.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>Scalar value of 2-norm.</returns>
            <exception cref="T:System.ArithmeticException">The vector, x, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Double[0:,0:],System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the matrix, A.
            </summary>
            <param name="a">The matrix, A.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>Scalar value of 2-norm.</returns>
            <exception cref="T:System.ArithmeticException">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Double[0:,0:],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the matrix, A.
            </summary>
            <param name="a">The matrix, A.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>Scalar value of 2-norm.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Int32[0:,0:],System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the matrix, A.
            </summary>
            <param name="a">The matrix, A.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>Scalar value of 2-norm.</returns>
            <exception cref="T:System.ArithmeticException">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.norm2(System.Int32[0:,0:],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns to 2-norm (square root of the sum of squares of all terms)
            of the matrix, A.
            </summary>
            <param name="a">The matrix, A.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <param name="dontDoSqrt">if set to <c>true</c> [don't take the square root].</param>
            <returns>Scalar value of 2-norm.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.normP(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Boolean)">
            <summary>
            Returns to p-norm (p-root of the sum of each term raised to the p power)
            </summary>
            <param name="x">The vector, x.</param>
            <param name="p">The power, p.</param>
            <param name="dontDoPRoot">if set to <c>true</c> [don't take the P-root].</param>
            <returns>Scalar value of P-norm.</returns>
            <exception cref="T:System.ArithmeticException">The vector, x, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.normP(System.Collections.Generic.IEnumerable{System.Int32},System.Double,System.Boolean)">
            <summary>
            Returns to p-norm (p-root of the sum of each term raised to the p power)
            </summary>
            <param name="x">The vector, x.</param>
            <param name="p">The power, p.</param>
            <param name="dontDoPRoot">if set to <c>true</c> [don't take the P-root].</param>
            <returns>Scalar value of P-norm.</returns>
            <exception cref="T:System.ArithmeticException">The vector, x, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.normP(System.Double[0:,0:],System.Double,System.Boolean)">
            <summary>
            Returns to p-norm (p-root of the sum of each term raised to the p power)
            </summary>
            <param name="a">The matrix, A.</param>
            <param name="p">The power, p.</param>
            <param name="dontDoPRoot">if set to <c>true</c> [don't take the P-root].</param>
            <returns>Scalar value of P-norm.</returns>
            <exception cref="T:System.ArithmeticException">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.normP(System.Double[0:,0:],System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns to p-norm (p-root of the sum of each term raised to the p power)
            </summary>
            <param name="a">The matrix, A.</param>
            <param name="p">The power, p.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <param name="dontDoPRoot">if set to <c>true</c> [don't take the P-root].</param>
            <returns>Scalar value of P-norm.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.normP(System.Int32[0:,0:],System.Double,System.Boolean)">
            <summary>
            Returns to p-norm (p-root of the sum of each term raised to the p power)
            </summary>
            <param name="a">The matrix, A.</param>
            <param name="p">The power, p.</param>
            <param name="dontDoPRoot">if set to <c>true</c> [don't take the P-root].</param>
            <returns>Scalar value of P-norm.</returns>
            <exception cref="T:System.ArithmeticException">The matrix, A, is null.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.normP(System.Int32[0:,0:],System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns to p-norm (p-root of the sum of each term raised to the p power)
            </summary>
            <param name="a">The matrix, A.</param>
            <param name="p">The power, p.</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of columns.</param>
            <param name="dontDoPRoot">if set to <c>true</c> [don't take the P-root].</param>
            <returns>Scalar value of 2-norm.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.normalize(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the normalized vector (has length (or 2-norm) of 1)
            for the vector, x.
            </summary>
            <param name="x">The vector, x.</param>
            <returns>unit vector.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.normalize(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Returns the normalized vector (has length (or 2-norm) of 1)
            for the vector, x.
            </summary>
            <param name="x">The vector, x.</param>
            <param name="length">The length of the vector.</param>
            <returns>unit vector.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.normalizeInPlace(System.Double[])">
            <summary>
            Destructively normalizes the vector x.
            </summary>
            <param name="x">The vector x.</param>
            <returns>IList&lt;System.Double&gt;.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.normalizeInPlace(System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Destructively normalizes the vector x.
            </summary>
            <param name="x">The x.</param>
            <param name="length">The length.</param>
            <returns>IList&lt;System.Double&gt;.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SumAllElements(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Sum up all the elements of a given matrix
            </summary>
            <param name="b">Matrix (1D double) whose parameters need to be summed up</param>
            <returns>Returns the total (double)</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SumAllElements(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sum up all the elements of a given matrix
            </summary>
            <param name="b">Matrix (1D int) whose parameters need to be summed up</param>
            <returns>Returns the total (int)</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SumAllElements(System.Double[0:,0:])">
            <summary>
            Sum up all the elements of a given matrix
            </summary>
            <param name="b">Matrix (2D double) whose parameters need to be summed up</param>
            <returns>Returns the total (double)</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SumAllElements(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Sum up all the elements of a given matrix
            </summary>
            <param name="b">Matrix (2D double) whose parameters need to be summed up</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of cols.</param>
            <returns>Returns the total (double)</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SumAllElements(System.Int32[0:,0:])">
            <summary>
            Sum up all the elements of a given matrix
            </summary>
            <param name="b">Matrix (2D double) whose parameters need to be summed up</param>
            <returns>Returns the total (int)</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SumAllElements(System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Sum up all the elements of a given matrix
            </summary>
            <param name="b">Matrix (2D double) whose parameters need to be summed up</param>
            <param name="numRows">The number of rows.</param>
            <param name="numCols">The number of cols.</param>
            <returns>Returns the total (double)</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SumAllRows(System.Double[0:,0:])">
            <summary>
            Sums all of the rows into a 1D array.
            </summary>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SumRow(System.Double[0:,0:],System.Int32)">
            <summary>
            Sums the row of the matrix.
            </summary>
            <param name="A">a.</param>
            <param name="index">The index.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SumRow(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Sums the values of a specified row.
            </summary>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SumAllColumns(System.Double[0:,0:])">
            <summary>
            Sums all of the columns into a 1D array.
            </summary>
            <param name="A">a.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SumColumn(System.Double[0:,0:],System.Int32)">
            <summary>
            Sums the values of a specified column.
            </summary>
            <param name="A">a.</param>
            <param name="index">The index.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SumColumn(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Sums the values of a specified column.
            </summary>
            <param name="A">a.</param>
            <param name="index">The index.</param>
            <param name="numRows">The number rows.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.standardDeviation(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Calculates the standard deviation assuming the whole population is provided (not sample st. dev.).
            </summary>
            <param name="A">An vector of integers, A.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.standardDeviation(System.Collections.Generic.IList{System.Double})">
            <summary>
            Calculates the standard deviation assuming the whole population is provided (not sample st. dev.).
            </summary>
            <param name="A">An vector of doubles, A.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.standardDeviation(System.Int32[0:,0:])">
            <summary>
            Calculates the standard deviation assuming the whole population is provided (not sample st. dev.).
            </summary>
            <param name="a">A matrix in integers, A.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.standardDeviation(System.Double[0:,0:])">
            <summary>
            Calculates the standard deviation assuming the whole population is provided (not sample st. dev.).
            </summary>
            <param name="a">A matrix in doubles, A.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.MakePrintString(System.Double[0:,0:])">
            <summary>
            Makes the print string.
            </summary>
            <param name="A">The matrix, A.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.MakePrintString(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Makes the print string.
            </summary>
            <param name="A">The A.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.MakePrintString(System.Int32[0:,0:])">
            <summary>
            Makes the print string.
            </summary>
            <param name="A">The A.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.MakePrintString(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Makes the print string.
            </summary>
            <param name="A">The A.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.formatCell(System.String,System.Double)">
            <summary>
            Formats the cell.
            </summary>
            <param name="format">The format.</param>
            <param name="p">The p.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.solve(System.Double[0:,0:],System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Boolean)">
            <summary>
            Solves the specified A matrix.
            </summary>
            <param name="A">The A.</param>
            <param name="b">The b.</param>
            <param name="initialGuess">The initial guess.</param>
            <param name="IsASymmetric">Is matrix A symmetric.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">Matrix, A, must be square.
            or
            Matrix, A, must be have the same number of rows as the vector, b.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.solve(System.Int32[0:,0:],System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Solves the specified A.
            </summary>
            <param name="A">The A.</param>
            <param name="b">The b.</param>
            <param name="initialGuess">The initial guess.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">Matrix, A, must be square.
            or
            Matrix, A, must be have the same number of rows as the vector, b.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.solve(System.Double[0:,0:],System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            Solves the specified A.
            </summary>
            <param name="A">The A.</param>
            <param name="b">The b.</param>
            <param name="initialGuess">The initial guess.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">Matrix, A, must be square.
            or
            Matrix, A, must be have the same number of rows as the vector, b.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.solve(System.Int32[0:,0:],System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            Solves the specified A.
            </summary>
            <param name="A">The A.</param>
            <param name="b">The b.</param>
            <param name="initialGuess">The initial guess.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">Matrix, A, must be square.
            or
            Matrix, A, must be have the same number of rows as the vector, b.</exception>
        </member>
        <member name="M:StarMathLib.StarMath.SolveAnalytically(System.Double[0:,0:],System.Collections.Generic.IList{System.Double},System.Boolean)">
            <summary>
            Solves the by inverse.
            </summary>
            <param name="A">a.</param>
            <param name="b">The b.</param>
            <param name="IsASymmetric">Is A known to be Symmetric?</param>
            <param name="potentialDiagonals">The potential diagonals.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.isGaussSeidelAppropriate(System.Double[0:,0:],System.Collections.Generic.IList{System.Double},System.Collections.Generic.List{System.Int32}[]@,System.Collections.Generic.IList{System.Double}@,System.Int32)">
            <summary>
            Determines whether [Gauss-Seidel is appropriate] [the specified a].
            </summary>
            <param name="A">the matrix, A</param>
            <param name="b">the right-hand-side values, b</param>
            <param name="potentialDiagonals">The potential rows.</param>
            <param name="initialGuess">The initial guess.</param>
            <param name="length">The length.</param>
            <returns><c>true</c> if [is gauss seidel appropriate] [the specified a]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.findPotentialDiagonals(System.Double[0:,0:],System.Collections.Generic.List{System.Int32}[]@,System.Int32,System.Double)">
            <summary>
            Finds the potential diagonals.
            </summary>
            <param name="A">a.</param>
            <param name="potentialDiagonals">The potential diagonals.</param>
            <param name="length">The length.</param>
            <param name="minimalConsideration">The minimal consideration.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:StarMathLib.StarMath.SolveIteratively(System.Double[0:,0:],System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Int32,System.Collections.Generic.List{System.Int32}[])">
            <summary>
            Solves the gauss seidel.
            </summary>
            <param name="A">a.</param>
            <param name="b">The b.</param>
            <param name="initialGuess">The initial guess.</param>
            <param name="length">The length.</param>
            <param name="potentialDiagonals">The potential indices.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.StarMath.makeInitialGuess(System.Double[0:,0:],System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Ifs the initial guess is null.
            </summary>
            <param name="A">a.</param>
            <param name="b">The b.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:StarMathLib.StarMath.reorderMatrixForDiagonalDominance(System.Double[0:,0:],System.Int32,System.Collections.Generic.List{System.Int32}[])">
            <summary>
            Reorders the matrix for diagonal dominance and returns the permutation vector.
            </summary>
            <param name="A">a.</param>
            <param name="length">The length.</param>
            <param name="potentialIndices">The potential indices.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:StarMathLib.CSparse.CompressedColumnStorage.Resize(System.Int32)">
            <summary>
                Change the max # of entries sparse matrix
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:StarMathLib.CSparse.SymbolicColumnStorage">
            <summary>
                Represents the nonzero pattern of a column-compressed matrix.
            </summary>
            <remarks>
                Used for ordering and symbolic factorization.
            </remarks>
        </member>
        <member name="M:StarMathLib.CSparse.SymbolicColumnStorage.Resize(System.Int32)">
            <summary>
                Change the max # of entries sparse matrix
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:StarMathLib.CSparse.SymbolicColumnStorage.Transpose">
            <summary>
                Computes the transpose of a sparse matrix, C = A';
            </summary>
            <returns>Transposed matrix, C = A'</returns>
        </member>
        <member name="M:StarMathLib.CSparse.SymbolicColumnStorage.CumulativeSum(System.Int32[],System.Int32[],System.Int32)">
            <summary>
                Cumulative sum of given array.
            </summary>
            <param name="sum">Output: cumulative sum of counts</param>
            <param name="counts">input array, overwritten with sum</param>
            <param name="size">length of counts</param>
            <returns>sum[size] (non-zeros)</returns>
        </member>
        <member name="M:StarMathLib.CSparse.SymbolicColumnStorage.Add(StarMathLib.CSparse.SymbolicColumnStorage)">
            <summary>
                Symbolic sum C = A + B
            </summary>
            <param name="other">column-compressed matrix</param>
            <returns>Sum C = A + B</returns>
        </member>
        <member name="M:StarMathLib.CSparse.SymbolicColumnStorage.Scatter(System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32)">
            <summary>
                Scatters and sums a sparse vector A(:,j) into a dense vector, x = x + beta * A(:,j).
            </summary>
            <param name="j">the column of A to use</param>
            <param name="work">size m, node i is marked if w[i] = mark</param>
            <param name="mark">mark value of w</param>
            <param name="ci">pattern of x accumulated in ci</param>
            <param name="nz">pattern of x placed in C starting at C.i[nz]</param>
            <returns>new value of nz</returns>
        </member>
        <member name="T:StarMathLib.CSparse.ApproximateMinimumDegree">
            <summary>
                Approximate Minimum Degree ordering.
            </summary>
        </member>
        <member name="M:StarMathLib.CSparse.ApproximateMinimumDegree.Generate(StarMathLib.CSparse.CompressedColumnStorage)">
            <summary>
                Generate minimum degree ordering of A+A' (if A is symmetric) or A'A.
            </summary>
            <param name="A">Column-compressed matrix</param>
            <returns>
                amd(A+A') if A is symmetric, or amd(A'A) otherwise, null on
                error or for natural ordering
            </returns>
            <remarks>
                See Chapter 7.1 (Fill-reducing orderings: Minimum degree ordering) in
                "Direct Methods for Sparse Linear Systems" by Tim Davis.
            </remarks>
        </member>
        <member name="M:StarMathLib.CSparse.ApproximateMinimumDegree.Reach(System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Reaches the specified gp.
            </summary>
            <param name="Gp">The gp.</param>
            <param name="Gi">The gi.</param>
            <param name="Bp">The bp.</param>
            <param name="Bi">The bi.</param>
            <param name="n">The n.</param>
            <param name="k">The k.</param>
            <param name="xi">The xi.</param>
            <param name="pinv">The pinv.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:StarMathLib.CSparse.ApproximateMinimumDegree.DepthFirstSearch(System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32[])">
            <summary>
            Depth-first-search of the graph of a matrix, starting at node j.
            </summary>
            <param name="j">starting node</param>
            <param name="Gp">graph to search (modified, then restored)</param>
            <param name="Gi">graph to search</param>
            <param name="top">stack[top..n-1] is used on input</param>
            <param name="xi">size n, stack containing nodes traversed</param>
            <param name="pstack">size n, work array</param>
            <param name="offset">the index of the first element in array pstack</param>
            <param name="pinv">mapping of rows to columns of G, ignored if null</param>
            <returns>new value of top, -1 on error</returns>
        </member>
        <member name="M:StarMathLib.CSparse.ApproximateMinimumDegree.TreeDepthFirstSearch(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Depth-first search and postorder of a tree rooted at node j
            </summary>
            <param name="j">postorder of a tree rooted at node j</param>
            <param name="k">number of nodes ordered so far</param>
            <param name="head">head[i] is first child of node i; -1 on output</param>
            <param name="next">next[i] is next sibling of i or -1 if none</param>
            <param name="post">postordering</param>
            <param name="stack">size n, work array</param>
            <returns>new value of k, -1 on error</returns>
        </member>
        <member name="M:StarMathLib.CSparse.Main.SolveLower(StarMathLib.CSparse.CompressedColumnStorage,System.Double[])">
            <summary>
            Solve a lower triangular system by forward elimination, Lx=b.
            </summary>
            <param name="L">The l.</param>
            <param name="x">The x.</param>
        </member>
        <member name="M:StarMathLib.CSparse.Main.SolveUpper(StarMathLib.CSparse.CompressedColumnStorage,System.Double[])">
            <summary>
            Solve an upper triangular system by backward elimination, Ux=b.
            </summary>
            <param name="U">The u.</param>
            <param name="x">The x.</param>
        </member>
        <member name="M:StarMathLib.CSparse.Main.FactorizeLU(StarMathLib.CSparse.CompressedColumnStorage,System.Int32[],StarMathLib.CSparse.CompressedColumnStorage@,StarMathLib.CSparse.CompressedColumnStorage@,System.Int32[]@)">
            <summary>
            [L,U,pinv] = lu(A, [q lnz unz]). lnz and unz can be guess.
            </summary>
            <param name="A">a.</param>
            <param name="columnPermutation">The column permutation.</param>
            <param name="L">The l.</param>
            <param name="U">The u.</param>
            <param name="pinv">The pinv.</param>
            <exception cref="T:System.Exception">No pivot element found.</exception>
        </member>
        <member name="M:StarMathLib.CSparse.Main.SolveSp(StarMathLib.CSparse.CompressedColumnStorage,StarMathLib.CSparse.CompressedColumnStorage,System.Int32,System.Int32[],System.Double[],System.Int32[],System.Boolean)">
            <summary>
            Solve Gx=b(:,k), where G is either upper (lo=false) or lower (lo=true)
            triangular.
            </summary>
            <param name="G">lower or upper triangular matrix in column-compressed form</param>
            <param name="B">right hand side, b=B(:,k)</param>
            <param name="k">use kth column of B as right hand side</param>
            <param name="xi">size 2*n, nonzero pattern of x in xi[top..n-1]</param>
            <param name="x">size n, x in x[xi[top..n-1]]</param>
            <param name="pinv">mapping of rows to columns of G, ignored if null</param>
            <param name="lo">true if lower triangular, false if upper</param>
            <returns>top, -1 in error</returns>
        </member>
        <member name="M:StarMathLib.CSparse.Main.SymbolicAnalysisLDL(StarMathLib.CSparse.CompressedColumnStorage)">
            <summary>
            Symbolics the analysis LDL.
            </summary>
            <param name="A">a.</param>
            <returns>SymbolicFactorization.</returns>
        </member>
        <member name="M:StarMathLib.CSparse.Main.FactorizeLDL(StarMathLib.CSparse.CompressedColumnStorage,StarMathLib.CSparse.SymbolicFactorization,System.Double[]@,StarMathLib.CSparse.CompressedColumnStorage@)">
            <summary>
            Compute the numeric LDL' factorization of PAP'.
            </summary>
            <param name="A">The matrix, A.</param>
            <param name="S">The symobolic factorization.</param>
            <param name="D">The diagonals of LDL.</param>
            <param name="L">The lower triangular matrix.</param>
            <exception cref="T:System.Exception">Diagonal element is zero.</exception>
        </member>
        <member name="M:StarMathLib.CSparse.Main.SolveLDL(System.Collections.Generic.IList{System.Double},StarMathLib.CSparse.CompressedColumnStorage,System.Double[],System.Int32[])">
            <summary>
            Solves a linear system Ax=b, where A is symmetric positive definite.
            </summary>
            <param name="b">The b.</param>
            <param name="L">The lower triangular matrix.</param>
            <param name="D">The diagonals.</param>
            <param name="inversePermute">The inverse permute.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.CSparse.Main.ApplyPermute(System.Int32[],System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Permutes a vector, x=P*b.
            </summary>
            <param name="p">Permutation vector.</param>
            <param name="b">Input vector.</param>
            <param name="n">Length of p, b and x.</param>
            <returns>System.Double[].</returns>
            <remarks>p = null denotes identity.</remarks>
        </member>
        <member name="M:StarMathLib.CSparse.Main.ApplyInversePermute(System.Int32[],System.Collections.Generic.IList{System.Double},System.Int32)">
            <summary>
            Permutes a vector, x = P'b.
            </summary>
            <param name="p">Permutation vector.</param>
            <param name="b">Input vector.</param>
            <param name="n">Length of p, b, and x.</param>
            <returns>System.Double[].</returns>
            <remarks>p = null denotes identity.</remarks>
        </member>
        <member name="M:StarMathLib.CSparse.Main.Invert(System.Int32[])">
            <summary>
            Inverts a permutation vector.
            </summary>
            <param name="p">A permutation vector.</param>
            <returns>Returns pinv[i] = k if p[k] = i on input.</returns>
        </member>
        <member name="T:StarMathLib.SparseMatrix">
            <summary>
            Class SparseMatrix.
            </summary>
            <summary>
            Class SparseMatrix.
            </summary>
            <summary>
            Class SparseMatrix.
            </summary>
        </member>
        <member name="M:StarMathLib.SparseMatrix.add(System.Double[0:,0:])">
            <summary>
            Adds the specified 2D double array, A to this sparse matrix to create a new
            2D double array.
            </summary>
            <param name="A">a.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:StarMathLib.SparseMatrix.subtract(System.Double[0:,0:])">
            <summary>
            Subtracts the specified 2D double array, A to this sparse matrix to create a new
            2D double array.
            </summary>
            <param name="A">a.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">
            Cannot subtract matrices of different sizes.
             </exception>
        </member>
        <member name="M:StarMathLib.SparseMatrix.addInPlace(StarMathLib.SparseMatrix)">
            <summary>
            Adds the specified 2D double array, A to this sparse matrix and writes over
            this sparse matrix with the result.
            </summary>
            <param name="A">a.</param>
            <exception cref="T:System.ArithmeticException">Adding Sparse Matrices can only be accomplished if both are the same size.</exception>
        </member>
        <member name="M:StarMathLib.SparseMatrix.subtractInPlace(StarMathLib.SparseMatrix)">
            <summary>
            Subtracts the specified 2D double array, A from this sparse matrix and writes over
            this sparse matrix with the result.
            </summary>
            <param name="A">a.</param>
            <exception cref="T:System.ArithmeticException">Adding Sparse Matrices can only be accomplished if both are the same size.</exception>
        </member>
        <member name="M:StarMathLib.SparseMatrix.add(StarMathLib.SparseMatrix)">
            <summary>
            Adds the specified 2D double array, A to this sparse matrix to create a new
            2D double array.
            </summary>
            <param name="A">a.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:StarMathLib.SparseMatrix.subtract(StarMathLib.SparseMatrix)">
            <summary>
            Subtracts the specified 2D double array, A from this sparse matrix to create a new
            2D double array.
            </summary>
            <param name="A">a.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:StarMathLib.SparseMatrix.SumAllElements">
            <summary>
            Sums all elements.
            </summary>
            <returns>System.Double.</returns>
        </member>
        <member name="M:StarMathLib.SparseMatrix.SumAllRows">
            <summary>
            Sums all of the rows.
            </summary>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.SparseMatrix.SumRow(System.Int32)">
            <summary>
            Sums the values of a specified row.
            </summary>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.SparseMatrix.SumAllColumns">
            <summary>
            Sums the columns.
            </summary>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.SparseMatrix.SumColumn(System.Int32)">
            <summary>
            Sums the values of a specified column.
            </summary>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.SparseMatrix.multiply(System.Double)">
            <summary>
            Multiplies all elements of this sparse matrix with a double value.
            </summary>
            <param name="a">The double value to be multiplied</param>
            <returns>A 2D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.SparseMatrix.Divide(System.Double)">
            <summary>
            Divides all elements of this sparse matrix with a double value.
            </summary>
            <param name="a">The double value to be divided by.</param>
            <returns>A 2D double array that contains the product</returns>
        </member>
        <member name="M:StarMathLib.SparseMatrix.multiplyInPlace(System.Double[0:,0:])">
            <summary>
            Multiplies this sparse matrix by a 2D double array. This sparse matrix is
            altered to reflect the result.
            </summary>
            <param name="A">a.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:StarMathLib.SparseMatrix.multiply(System.Double[0:,0:])">
            <summary>
            Multiplies this sparse matrix by a 2D double array, and returns a new double array.
            </summary>
            <param name="A">a.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:StarMathLib.SparseMatrix.multiply(System.Collections.Generic.IList{System.Double})">
            <summary>
            Multiplies the specified x.
            </summary>
            <param name="x">The x.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">Matrix number of columns does not match length of vector.</exception>
        </member>
        <member name="P:StarMathLib.SparseMatrix.Diagonals">
            <summary>
            The first non-zero cell in each row.
            </summary>
        </member>
        <member name="P:StarMathLib.SparseMatrix.RowFirsts">
            <summary>
            The first non-zero cell in each row.
            </summary>
        </member>
        <member name="P:StarMathLib.SparseMatrix.RowLasts">
            <summary>
            The last non-zero cell in each row.
            </summary>
        </member>
        <member name="P:StarMathLib.SparseMatrix.ColFirsts">
            <summary>
            The first non-zero cell in each column.
            </summary>
        </member>
        <member name="P:StarMathLib.SparseMatrix.ColLasts">
            <summary>
            The last non-zero cell in each column.
            </summary>
        </member>
        <member name="P:StarMathLib.SparseMatrix.NumNonZero">
            <summary>
            The number non zero
            </summary>
        </member>
        <member name="P:StarMathLib.SparseMatrix.NumCols">
            <summary>
            The number cols
            </summary>
        </member>
        <member name="P:StarMathLib.SparseMatrix.NumRows">
            <summary>
            The number rows
            </summary>
        </member>
        <member name="M:StarMathLib.SparseMatrix.#ctor(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:StarMathLib.SparseMatrix" /> class.
            </summary>
            <param name="rowIndices">The row indices.</param>
            <param name="colIndices">The col indices.</param>
            <param name="values">The values.</param>
            <param name="numRows">The number rows.</param>
            <param name="numCols">The number cols.</param>
        </member>
        <member name="M:StarMathLib.SparseMatrix.#ctor(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StarMathLib.SparseMatrix"/> class.
            </summary>
            <param name="indices">The row by row indices.</param>
            <param name="values">The values.</param>
            <param name="numRows">The number rows.</param>
            <param name="numCols">The number cols.</param>
            <param name="InRowOrder">The in row order.</param>
        </member>
        <member name="M:StarMathLib.SparseMatrix.#ctor(System.Collections.Generic.Dictionary{System.Int32[],System.Double},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:StarMathLib.SparseMatrix"/> class.
            </summary>
            <param name="cellDictionary">The cell dictionary with keys as [i,j] pairs.</param>
            <param name="numRows">The number rows.</param>
            <param name="numCols">The number cols.</param>
        </member>
        <member name="M:StarMathLib.SparseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:StarMathLib.SparseMatrix"/> class.
            </summary>
            <param name="numRows">The number rows.</param>
            <param name="numCols">The number cols.</param>
        </member>
        <member name="M:StarMathLib.SparseMatrix.UpdateValues(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double})">
            <summary>
            Updates the values.
            </summary>
            <param name="rowIndices">The row indices.</param>
            <param name="colIndices">The col indices.</param>
            <param name="values">The values.</param>
        </member>
        <member name="M:StarMathLib.SparseMatrix.UpdateValues(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Double},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:StarMathLib.SparseMatrix" /> class.
            </summary>
            <param name="rowByRowIndices">The row by row indices.</param>
            <param name="values">The values.</param>
            <param name="InRowOrder">The in row order.</param>
        </member>
        <member name="M:StarMathLib.SparseMatrix.ConvertSparseToDenseMatrix">
            <summary>
            Converts the sparse matrix to a dense matrix.
            </summary>
            <returns>System.Double[].</returns>
        </member>
        <member name="P:StarMathLib.SparseMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Double" /> with the specified row i.
            </summary>
            <param name="rowI">The row i.</param>
            <param name="colI">The col i.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:StarMathLib.SparseMatrix.TrySearchRightToCell(System.Int32,StarMathLib.SparseCell@)">
            <summary>
            Searches the left to.
            </summary>
            <param name="colIndex">Index of the col.</param>
            <param name="startCell">The start cell.</param>
            <returns>SparseCell.</returns>
        </member>
        <member name="M:StarMathLib.SparseMatrix.SearchRightToCell(System.Int32,StarMathLib.SparseCell)">
            <summary>
            Searches the left to.
            </summary>
            <param name="colIndex">Index of the col.</param>
            <param name="startCell">The start cell.</param>
            <returns>SparseCell.</returns>
        </member>
        <member name="M:StarMathLib.SparseMatrix.SearchDownToCell(System.Int32,StarMathLib.SparseCell)">
            <summary>
            Searches down to.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="startCell">The start cell.</param>
            <returns>SparseCell.</returns>
            <exception cref="T:System.ArithmeticException">No non-zero sparse matrix cell found at the location.</exception>
        </member>
        <member name="M:StarMathLib.SparseMatrix.RemoveRow(System.Int32)">
            <summary>
            Removes the row.
            </summary>
            <param name="rowIndexToRemove">The row index to remove.</param>
        </member>
        <member name="M:StarMathLib.SparseMatrix.RemoveColumn(System.Int32)">
            <summary>
            Removes the column.
            </summary>
            <param name="colIndexToRemove">The col index to remove.</param>
        </member>
        <member name="M:StarMathLib.SparseMatrix.RemoveRows(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Removes the rows.
            </summary>
            <param name="rowIndicesToRemove">The row indices to remove.</param>
        </member>
        <member name="M:StarMathLib.SparseMatrix.RemoveColumns(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Removes the columns.
            </summary>
            <param name="colIndicesToRemove">The col indices to remove.</param>
        </member>
        <member name="M:StarMathLib.SparseMatrix.solve(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.Boolean)">
            <summary>
            Solves the system of equations where this Sparse Matrix is 'A' in Ax = b.
            The resulting x is returned.
            </summary>
            <param name="b">The b.</param>
            <param name="initialGuess">The initial guess.</param>
            <param name="IsASymmetric">The is a symmetric.</param>
            <returns>System.Double[].</returns>
            <exception cref="T:System.ArithmeticException">Spare Matrix must be square to solve Ax = b.
            or
            Sparse Matrix must be have the same number of rows as the vector, b.</exception>
            <exception cref="T:System.ArithmeticException">Spare Matrix must be square to solve Ax = b.
            or
            Sparse Matrix must be have the same number of rows as the vector, b.</exception>
        </member>
        <member name="M:StarMathLib.SparseMatrix.SolveAnalytically(System.Collections.Generic.IList{System.Double},System.Boolean,System.Collections.Generic.List{System.Int32}[])">
            <summary>
            Solves the system of equations analytically.
            </summary>
            <param name="b">The b.</param>
            <param name="IsASymmetric">if set to <c>true</c> [a is symmetric].</param>
            <param name="potentialDiagonals">The potential diagonals.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.SparseMatrix.CholeskyDecomposition">
            <summary>
            Overwrites the matrix with its Cholesky decomposition (i.e. it is destructive).
            This is based on: https://en.wikipedia.org/wiki/Cholesky_decomposition#LDL_decomposition_2
            </summary>
            <returns>SparseMatrix.</returns>
            <exception cref="T:System.ArithmeticException">Cholesky Decomposition can only be determined for square matrices.</exception>
            <exception cref="T:System.ArithmeticException">Cholesky Decomposition can only be determined for square matrices.</exception>
        </member>
        <member name="M:StarMathLib.SparseMatrix.solveFromCholeskyFactorization(System.Collections.Generic.IList{System.Double})">
            <summary>
            Solves from cholesky factorization.
            </summary>
            <param name="b">The b.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:StarMathLib.SparseMatrix.AddCellToTheLeftOfAndBelow(StarMathLib.SparseCell,StarMathLib.SparseCell,System.Int32,System.Int32,System.Double)">
            <summary>
            Adds the cell to the left of and below.
            </summary>
            <param name="cellToTheRight">The cell to the right.</param>
            <param name="cellToTheUp">The cell to the up.</param>
            <param name="rowI">The row i.</param>
            <param name="colI">The col i.</param>
            <param name="value">The value.</param>
            <returns>SparseCell.</returns>
        </member>
        <member name="M:StarMathLib.SparseMatrix.AddCellToTheLeftOfAndAbove(StarMathLib.SparseCell,StarMathLib.SparseCell,System.Int32,System.Int32,System.Double)">
            <summary>
            Adds the cell to the left of and below.
            </summary>
            <param name="cellToTheRight">The cell to the right.</param>
            <param name="cellToTheUp">The cell to the up.</param>
            <param name="rowI">The row i.</param>
            <param name="colI">The col i.</param>
            <param name="value">The value.</param>
            <returns>SparseCell.</returns>
        </member>
        <member name="T:StarMathLib.SparseCell">
            <summary>
            Class SparseCell.
            </summary>
        </member>
        <member name="F:StarMathLib.SparseCell.ColIndex">
            <summary>
            The col index
            </summary>
        </member>
        <member name="F:StarMathLib.SparseCell.Down">
            <summary>
            Down
            </summary>
        </member>
        <member name="F:StarMathLib.SparseCell.Left">
            <summary>
            The left
            </summary>
        </member>
        <member name="F:StarMathLib.SparseCell.Right">
            <summary>
            The right
            </summary>
        </member>
        <member name="F:StarMathLib.SparseCell.RowIndex">
            <summary>
            The row index
            </summary>
        </member>
        <member name="F:StarMathLib.SparseCell.Up">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:StarMathLib.SparseCell.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:StarMathLib.SparseCell.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:StarMathLib.SparseCell" /> class.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="colIndex">Index of the col.</param>
            <param name="value">The value.</param>
        </member>
    </members>
</doc>
