// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.27210 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>3mf</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml.Serialization;
using StarMathLib;

namespace TVGL.IOFunctions.threemfclasses
{

    #region Build and Item

    /// <summary>
    ///     Class Build is a major categoy usually following resources.
    /// </summary>
#if help
    internal class Build
#else
    public class Build
#endif
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Build" /> class.
        /// </summary>
        public Build()
        {
            Items = new List<Item>();
        }

        /// <summary>
        ///     Gets or sets the item.
        /// </summary>
        /// <value>The item.</value>
        [XmlElement("item")]
        public List<Item> Items { get; set; }
    }

    /// <summary>
    ///     Class Item - is used in the build section.
    /// </summary>
#if help
    internal class Item
#else
    public class Item
#endif
    {
        /// <summary>
        ///     Gets or sets the objectid.
        /// </summary>
        /// <value>The objectid.</value>
        [XmlAttribute]
        public int objectid { get; set; }

        /// <summary>
        ///     Gets or sets the transform.
        /// </summary>
        /// <value>The transform.</value>
        [XmlAttribute]
        public string transform { get; set; }

        /// <summary>
        ///     Gets or sets the itemref.
        /// </summary>
        [XmlAttribute]
        /// <value>The itemref.</value>
        public string itemref { get; set; }

        internal double[] transformArray
        {
            get
            {
                if (string.IsNullOrWhiteSpace(transform)) return null;
                var stringTerms = transform.Trim().Split(' ', ',');
                var num = stringTerms.Length;
                var result = new double[num];
                for (var i = 0; i < num; i++)
                {
                    double term;
                    if (double.TryParse(stringTerms[i], out term))
                        result[i] = term;
                    else result[i] = double.NaN;
                }
                return result;
            }
        }

        internal double[,] transformMatrix
        {
            get
            {
                if (transformArray == null || (transformArray.Length != 3 && transformArray.Length != 12)) return null;
                var result = StarMath.makeIdentity(4);
                if (transformArray.Length == 3)
                {
                    result[0, 3] = transformArray[0];
                    result[1, 3] = transformArray[1];
                    result[2, 3] = transformArray[2];
                    return result;
                }
                result[0, 0] = transformArray[0];
                result[1, 0] = transformArray[1];
                result[2, 0] = transformArray[2];
                result[0, 1] = transformArray[3];
                result[1, 1] = transformArray[4];
                result[2, 1] = transformArray[5];
                result[0, 2] = transformArray[6];
                result[1, 2] = transformArray[7];
                result[2, 2] = transformArray[8];
                result[0, 3] = transformArray[9];
                result[1, 3] = transformArray[10];
                result[2, 3] = transformArray[11];
                return result;
            }
        }
    }

    #endregion

    #region just MetaData

    /// <summary>
    ///     Class Metadata is used in the header and potentially other places.
    /// </summary>
#if help
    internal class Metadata
#else
    public class Metadata
#endif
    {
        /// <summary>
        ///     The type
        /// </summary>
        [XmlAttribute("name")] public string type;

        /// <summary>
        ///     The value
        /// </summary>
        [XmlText] public string Value;
    }

    #endregion

    #region Objects: Component, Mesh, etc.

    /// <summary>
    ///     Class Component.
    /// </summary>
#if help
    internal class Component
#else
    public class Component
#endif
    {
        /// <summary>
        ///     Gets or sets the objectid.
        /// </summary>
        /// <value>The objectid.</value>
        [XmlAttribute]
        public int objectid { get; set; }

        /// <summary>
        ///     Gets or sets the transform.
        /// </summary>
        /// <value>The transform.</value>
        [XmlAttribute]
        public string transform { get; set; }
    }

    /// <summary>
    ///     Class CT_Triangle.
    /// </summary>
#if help
    internal class Triangle
#else
    public class Triangle
#endif
    {
        public Triangle()
        {
            p1 = p2 = p3 = pid = -1;
        }
        /// <summary>
        ///     Gets or sets the v1.
        /// </summary>
        /// <value>The v1.</value>
        [XmlAttribute]
        public int v1 { get; set; }

        /// <summary>
        ///     Gets or sets the v2.
        /// </summary>
        /// <value>The v2.</value>
        [XmlAttribute]
        public int v2 { get; set; }

        /// <summary>
        ///     Gets or sets the v3.
        /// </summary>
        /// <value>The v3.</value>
        [XmlAttribute]
        public int v3 { get; set; }

        /// <summary>
        ///     Gets or sets the p1.
        /// </summary>
        /// <value>The p1.</value>
        [XmlAttribute]
        public int p1 { get; set; }

        /// <summary>
        ///     Gets or sets the p2.
        /// </summary>
        /// <value>The p2.</value>
        [XmlAttribute]
        public int p2 { get; set; }

        /// <summary>
        ///     Gets or sets the p3.
        /// </summary>
        /// <value>The p3.</value>
        [XmlAttribute]
        public int p3 { get; set; }

        /// <summary>
        ///     Gets or sets the pid.
        /// </summary>
        /// <value>The pid.</value>
        [XmlAttribute]
        public int pid { get; set; }
    }

    /// <summary>
    ///     Class CT_Vertex.
    /// </summary>
#if help
    internal class Vertex
#else
    public class Vertex
#endif
    {
        /// <summary>
        ///     Gets or sets the x.
        /// </summary>
        /// <value>The x.</value>
        [XmlAttribute]
        public double x { get; set; }

        /// <summary>
        ///     Gets or sets the y.
        /// </summary>
        /// <value>The y.</value>
        [XmlAttribute]
        public double y { get; set; }

        /// <summary>
        ///     Gets or sets the z.
        /// </summary>
        /// <value>The z.</value>
        [XmlAttribute]
        public double z { get; set; }
    }

    /// <summary>
    ///     Class CT_Mesh.
    /// </summary>
#if help
    internal class Mesh
#else
    public class Mesh
#endif
    {
        /// <summary>
        ///     Gets or sets the vertices.
        /// </summary>
        /// <value>The vertices.</value>
        [XmlArrayItem("vertex", IsNullable = false)]
        public List<Vertex> vertices { get; set; }

        /// <summary>
        ///     Gets or sets the triangles.
        /// </summary>
        /// <value>The triangles.</value>
        [XmlArrayItem("triangle", IsNullable = false)]
        public List<Triangle> triangles { get; set; }
    }

    /// <summary>
    ///     Class Object.
    /// </summary>
#if help
    internal class Object
#else
    public class Object
#endif
    {
        public Object()
        {
            MaterialID = -1;
        }
        [XmlAttribute]
        public int id { get; set; }

        [XmlAttribute]
        [DefaultValue(ObjectType.model)]
        public ObjectType type { get; set; }

        [XmlAttribute("materialid")]
        public int MaterialID { get; set; }

        [XmlAttribute]
        public string thumbnail { get; set; }

        [XmlAttribute]
        public int partnumber { get; set; }

        [XmlAttribute]
        public string name { get; set; }

        [XmlElement]
        public Mesh mesh { get; set; }

        /// <summary>
        ///     Gets or sets the components.
        /// </summary>
        /// <value>The components.</value>
        [XmlArrayItem("component", IsNullable = false)]
        public List<Component> components { get; set; }
    }

    /// <summary>
    ///     Enum ST_ObjectType
    /// </summary>
#if help
    internal enum ST_ObjectType
#else
    public enum ObjectType
#endif
    {
        /// <summary>
        ///     The model
        /// </summary>
        model,

        /// <summary>
        ///     The support
        /// </summary>
        support,

        /// <summary>
        ///     The other
        /// </summary>
        other
    }

    /// <summary>
    ///     Enum Unit
    /// </summary>
#if help
    internal enum Unit
#else
    public enum Unit
#endif
    {
        unspecified = -1,

        /// <summary>
        ///     The micron
        /// </summary>
        micron,

        /// <summary>
        ///     The millimeter
        /// </summary>
        millimeter,

        /// <summary>
        ///     The centimeter
        /// </summary>
        centimeter,

        /// <summary>
        ///     The inch
        /// </summary>
        inch,

        /// <summary>
        ///     The foot
        /// </summary>
        foot,

        /// <summary>
        ///     The meter
        /// </summary>
        meter
    }

    #endregion

    #region Resources

    /// <summary>
    ///     Class CT_Resources.
    /// </summary>
#if help
    internal class Resources
#else
    public class Resources
#endif
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Resources" /> class.
        /// </summary>
        public Resources()
        {
            objects = new List<Object>();
            materials = new List<Material>();
            basematerials = new List<Material>();
        }

        [XmlElement("basematerials")]
        public List<Material> basematerials { get; set; }

        [XmlElement("material")]
        public List<Material> materials { get; set; }

        [XmlElement("color")]
        public List<Color3MF> colors { get; set; }

        /// <summary>
        ///     Gets or sets the object.
        /// </summary>
        /// <value>The object.</value>
        [XmlElement("object")]
        public List<Object> objects { get; set; }
    }

    #endregion

    #region Materials and Colors

    /// <summary>
    ///     Class Material.
    /// </summary>
#if help
    internal class Material
#else
    public class Material
#endif
    {
        public Material()
        {
           // bases = new List<Base>();
        }

        /// <summary>
        ///     Gets or sets the base.
        /// </summary>
        /// <value>The base.</value>
        [XmlArrayItem("base", IsNullable = false)]
        public List<Base> bases { get; set; }

        [XmlAttribute]
        public string name { get; set; }

        [XmlAttribute]
        public int id { get; set; }

        [XmlAttribute]
        public int colorid { get; set; }

        [XmlAttribute]
        public string type { get; set; }
    }

    /// <summary>
    ///     Class Color3MF.
    /// </summary>
#if help
    internal class Color3MF
#else
    public class Color3MF
#endif
    {
        [XmlAttribute]
        public string name { get; set; }

        [XmlAttribute]
        public int id { get; set; }

        [XmlAttribute("value")]
        public string colorString { get; set; }

        internal Color color
        {
            get
            {
                if (string.IsNullOrWhiteSpace(colorString) || (colorString.Length != 7 && colorString.Length != 9))
                    return new Color(KnownColors.UnknownColor);
                var r = Convert.ToByte(colorString.Substring(1, 2), 16);
                var g = Convert.ToByte(colorString.Substring(3, 2), 16);
                var b = Convert.ToByte(colorString.Substring(5, 2), 16);
                if (colorString.Length == 9)
                {
                    var a = Convert.ToByte(colorString.Substring(7, 2), 16);
                    return new Color(a, r, g, b);
                }
                return new Color(r, g, b);
            }
        }
    }

    /// <summary>
    ///     Class Base.
    /// </summary>
#if help
    internal class Base
#else
    public class Base
#endif
    {
        /// <summary>
        ///     Gets or sets the name.
        /// </summary>
        /// <value>The name.</value>
        [XmlAttribute]
        public string name { get; set; }
        
        [XmlAttribute("displaycolor")]
        public string colorString { get; set; }

        internal Color color
        {
            get
            {
                if (string.IsNullOrWhiteSpace(colorString) || (colorString.Length != 7 && colorString.Length != 9))
                    return new Color(KnownColors.UnknownColor);
                var r = Convert.ToByte(colorString.Substring(1, 2), 16);
                var g = Convert.ToByte(colorString.Substring(3, 2), 16);
                var b = Convert.ToByte(colorString.Substring(5, 2), 16);
                if (colorString.Length == 9)
                {
                    var a = Convert.ToByte(colorString.Substring(7, 2), 16);
                    return new Color(a, r, g, b);
                }
                return new Color(r, g, b);
            }
        }
    }

    #endregion
}