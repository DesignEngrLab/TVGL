<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MIConvexHull</name>
    </assembly>
    <members>
        <member name="T:MIConvexHull.VertexBuffer">
            <summary>
            Used to effectively store vertices beyond.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MIConvexHull.VertexBuffer.EnsureCapacity">
            <summary>
            Size matters.
            </summary>
        </member>
        <member name="M:MIConvexHull.VertexBuffer.Add(MIConvexHull.VertexWrap)">
            <summary>
            Adds a vertex to the buffer.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MIConvexHull.VertexBuffer.Clear">
            <summary>
            Sets the Count to 0, otherwise does nothing.
            </summary>
        </member>
        <member name="P:MIConvexHull.VertexBuffer.Count">
            <summary>
            Number of elements present in the buffer.
            </summary>
        </member>
        <member name="P:MIConvexHull.VertexBuffer.Item(System.Int32)">
            <summary>
            Get the i-th element.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:MIConvexHull.FaceList">
            <summary>
            A priority based linked list.
            </summary>
        </member>
        <member name="M:MIConvexHull.FaceList.AddFirst(MIConvexHull.ConvexFaceInternal)">
            <summary>
            Adds the element to the beginning.
            </summary>
            <param name="face"></param>
        </member>
        <member name="M:MIConvexHull.FaceList.Add(MIConvexHull.ConvexFaceInternal)">
            <summary>
            Adds a face to the list.
            </summary>
            <param name="face"></param>
        </member>
        <member name="M:MIConvexHull.FaceList.Remove(MIConvexHull.ConvexFaceInternal)">
            <summary>
            Removes the element from the list.
            </summary>
            <param name="face"></param>
        </member>
        <member name="P:MIConvexHull.FaceList.First">
            <summary>
            Get the first element.
            </summary>
        </member>
        <member name="T:MIConvexHull.ConnectorList">
            <summary>
            Connector list.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConnectorList.AddFirst(MIConvexHull.FaceConnector)">
            <summary>
            Adds the element to the beginning.
            </summary>
            <param name="connector"></param>
        </member>
        <member name="M:MIConvexHull.ConnectorList.Add(MIConvexHull.FaceConnector)">
            <summary>
            Adds a face to the list.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:MIConvexHull.ConnectorList.Remove(MIConvexHull.FaceConnector)">
            <summary>
            Removes the element from the list.
            </summary>
            <param name="connector"></param>
        </member>
        <member name="P:MIConvexHull.ConnectorList.First">
            <summary>
            Get the first element.
            </summary>
        </member>
        <member name="F:MIConvexHull.Constants.PlaneDistanceTolerance">
            <summary>
            A value used to determine if a vertex lies on a plane.
            </summary>
        </member>
        <member name="T:MIConvexHull.ConvexFace`2">
            <summary>
            A convex face representation containing adjacency information.
            </summary>
        </member>
        <member name="P:MIConvexHull.ConvexFace`2.Adjacency">
            <summary>
            Adjacency. Array of length "dimension".
            If F = Adjacency[i] then the vertices shared with F are Vertices[j] where j != i.
            In the context of triangulation, can be null (indicates the cell is at boundary).
            </summary>
        </member>
        <member name="P:MIConvexHull.ConvexFace`2.Vertices">
            <summary>
            The vertices stored in clockwise order (for dimensions 2 - 4, higher dimensions the order is arbitrary).
            Unless I accidentally switch some index somewhere in which case the order is CCW. Either way, it is consistent.
            3D Normal = (V[1] - V[0]) x (V[2] - V[1]).
            </summary>
        </member>
        <member name="P:MIConvexHull.ConvexFace`2.Normal">
            <summary>
            The normal vector of the face. Null if used in triangulation.
            </summary>
        </member>
        <member name="T:MIConvexHull.DefaultConvexFace`1">
            <summary>
            A default convex face representation.
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="T:MIConvexHull.VertexWrap">
            <summary>
            Wraps each IVertex to allow marking of nodes.
            </summary>
        </member>
        <member name="F:MIConvexHull.VertexWrap.Vertex">
            <summary>
            Ref. to the original vertex.
            </summary>
        </member>
        <member name="F:MIConvexHull.VertexWrap.PositionData">
            <summary>
            Direct reference to PositionData makes IsVertexOverFace faster.
            </summary>
        </member>
        <member name="F:MIConvexHull.VertexWrap.Index">
            <summary>
            Vertex index.
            </summary>
        </member>
        <member name="F:MIConvexHull.VertexWrap.Marked">
            <summary>
            Used mostly to enumerate unique vertices.
            </summary>
        </member>
        <member name="T:MIConvexHull.VertexWrapComparer">
            <summary>
            Compare vertices based on their indices.
            </summary>
        </member>
        <member name="T:MIConvexHull.DeferredFace">
            <summary>
            For deferred face addition.
            </summary>
        </member>
        <member name="F:MIConvexHull.DeferredFace.Face">
            <summary>
            The faces.
            </summary>
        </member>
        <member name="F:MIConvexHull.DeferredFace.Pivot">
            <summary>
            The faces.
            </summary>
        </member>
        <member name="F:MIConvexHull.DeferredFace.OldFace">
            <summary>
            The faces.
            </summary>
        </member>
        <member name="F:MIConvexHull.DeferredFace.FaceIndex">
            <summary>
            The indices.
            </summary>
        </member>
        <member name="F:MIConvexHull.DeferredFace.PivotIndex">
            <summary>
            The indices.
            </summary>
        </member>
        <member name="T:MIConvexHull.FaceConnector">
            <summary>
            A helper class used to connect faces.
            </summary>
        </member>
        <member name="F:MIConvexHull.FaceConnector.Face">
            <summary>
            The face.
            </summary>
        </member>
        <member name="F:MIConvexHull.FaceConnector.EdgeIndex">
            <summary>
            The edge to be connected.
            </summary>
        </member>
        <member name="F:MIConvexHull.FaceConnector.Vertices">
            <summary>
            The vertex indices.
            </summary>
        </member>
        <member name="F:MIConvexHull.FaceConnector.HashCode">
            <summary>
            The hash code computed from indices.
            </summary>
        </member>
        <member name="F:MIConvexHull.FaceConnector.Previous">
            <summary>
            Prev node in the list.
            </summary>
        </member>
        <member name="F:MIConvexHull.FaceConnector.Next">
            <summary>
            Next node in the list.
            </summary>
        </member>
        <member name="M:MIConvexHull.FaceConnector.#ctor(System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="dimension"></param>
        </member>
        <member name="M:MIConvexHull.FaceConnector.Update(MIConvexHull.ConvexFaceInternal,System.Int32,System.Int32)">
            <summary>
            Updates the connector.
            </summary>
            <param name="face"></param>
            <param name="edgeIndex"></param>
            <param name="dim"></param>
        </member>
        <member name="M:MIConvexHull.FaceConnector.AreConnectable(MIConvexHull.FaceConnector,MIConvexHull.FaceConnector,System.Int32)">
            <summary>
            Can two faces be connected.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.FaceConnector.Connect(MIConvexHull.FaceConnector,MIConvexHull.FaceConnector)">
            <summary>
            Connect two faces.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="T:MIConvexHull.ConvexFaceInternal">
            <summary>
            This internal class manages the faces of the convex hull. It is a 
            separate class from the desired user class.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexFaceInternal.#ctor(System.Int32,MIConvexHull.VertexBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:MIConvexHull.ConvexFaceInternal"/> class.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.AdjacentFaces">
            <summary>
            Gets or sets the adjacent face data.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.VerticesBeyond">
            <summary>
            Gets or sets the vertices beyond.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.FurthestVertex">
            <summary>
            The furthest vertex.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.Vertices">
            <summary>
            Gets or sets the vertices.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.Normal">
            <summary>
            Gets or sets the normal vector.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.IsNormalFlipped">
            <summary>
            Is the normal flipped?
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.Offset">
            <summary>
            Face plane constant element.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.Tag">
            <summary>
            Used to traverse affected faces and create the Delaunay representation.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.Previous">
            <summary>
            Prev node in the list.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.Next">
            <summary>
            Next node in the list.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexFaceInternal.InList">
            <summary>
            Is it present in the list.
            </summary>
        </member>
        <member name="T:MIConvexHull.ConvexHull">
            <summary>
            Factory class for computing convex hulls.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHull.Create``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a convex hull of the input data.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TFace"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.ConvexHull.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a convex hull of the input data.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.ConvexHull.Create(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Creates a convex hull of the input data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:MIConvexHull.ConvexHull`2">
            <summary>
            Representation of a convex hull.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TFace"></typeparam>
        </member>
        <member name="M:MIConvexHull.ConvexHull`2.Create(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates the convex hull.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.ConvexHull`2.#ctor">
            <summary>
            Can only be created using a factory method.
            </summary>
        </member>
        <member name="P:MIConvexHull.ConvexHull`2.Points">
            <summary>
            Points of the convex hull.
            </summary>
        </member>
        <member name="P:MIConvexHull.ConvexHull`2.Faces">
            <summary>
            Faces of the convex hull.
            </summary>
        </member>
        <member name="F:MIConvexHull.ConvexHullInternal.Center">
            <summary>
            The centroid of the currently computed hull.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.Initialize">
            <summary>
            Initialize buffers and lists.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.DetermineDimension">
            <summary>
            Check the dimensionality of the input data.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.InitiateFaceDatabase">
            <summary>
            Create the first faces from (dimension + 1) vertices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.CalculateFacePlane(MIConvexHull.ConvexFaceInternal)">
            <summary>
            Calculates the normal and offset of the hyper-plane given by the face's vertices.
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.TagAffectedFaces(MIConvexHull.ConvexFaceInternal)">
            <summary>
            Tags all faces seen from the current vertex with 1.
            </summary>
            <param name="currentFace"></param>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.TraverseAffectedFaces(MIConvexHull.ConvexFaceInternal)">
            <summary>
            Recursively traverse all the relevant faces.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.UpdateAdjacency(MIConvexHull.ConvexFaceInternal,MIConvexHull.ConvexFaceInternal)">
            <summary>
            Check if 2 faces are adjacent and if so, update their AdjacentFaces array.
            </summary>
            <param name="l"></param>
            <param name="r"></param>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.MakeDeferredFace(MIConvexHull.ConvexFaceInternal,System.Int32,MIConvexHull.ConvexFaceInternal,System.Int32,MIConvexHull.ConvexFaceInternal)">
            <summary>
            Creates a new deferred face.
            </summary>
            <param name="face"></param>
            <param name="faceIndex"></param>
            <param name="pivot"></param>
            <param name="pivotIndex"></param>
            <param name="oldFace"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.ConnectFace(MIConvexHull.FaceConnector)">
            <summary>
            Connect faces using a connector.
            </summary>
            <param name="connector"></param>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.CreateCone">
            <summary>
            Removes the faces "covered" by the current vertex and adds the newly created ones.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.CommitCone">
            <summary>
            Commits a cone and adds a vertex to the convex hull.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.IsBeyond(MIConvexHull.ConvexFaceInternal,MIConvexHull.VertexBuffer,MIConvexHull.VertexWrap)">
            <summary>
            Check whether the vertex v is beyond the given face. If so, add it to beyondVertices.
            </summary>
            <param name="face"></param>
            <param name="beyondVertices"></param>
            <param name="v"></param>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.FindBeyondVertices(MIConvexHull.ConvexFaceInternal)">
            <summary>
            Used in the "initialization" code.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.FindBeyondVertices(MIConvexHull.ConvexFaceInternal,MIConvexHull.VertexBuffer,MIConvexHull.VertexBuffer)">
            <summary>
            Used by update faces.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.UpdateCenter">
            <summary>
            Recalculates the centroid of the current hull.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.RollbackCenter">
            <summary>
            Removes the last vertex from the center.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.InitConvexHull">
            <summary>
            Find the (dimension+1) initial points and create the simplexes.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.FindInitialPoints(System.Collections.Generic.List{MIConvexHull.VertexWrap})">
            <summary>
            Finds (dimension + 1) initial points.
            </summary>
            <param name="extremes"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.GetSquaredDistanceSum(MIConvexHull.VertexWrap,System.Collections.Generic.List{MIConvexHull.VertexWrap})">
            <summary>
            Computes the sum of square distances to the initial points.
            </summary>
            <param name="pivot"></param>
            <param name="initialPoints"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.FindExtremes">
            <summary>
            Finds the extremes in all dimensions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.ThrowSingular">
            <summary>
            The exception thrown if singular input data detected.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.HandleSingular">
            <summary>
            Handles singular vertex.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.FindConvexHull">
            <summary>
            Fins the convex hull.
            </summary>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.#ctor(System.Collections.Generic.IEnumerable{MIConvexHull.IVertex})">
            <summary>
            Wraps the vertices and determines the dimension if it's unknown.
            </summary>
            <param name="vertices"></param>
            <param name="dim"></param>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.GetConvexHullInternal``1(System.Boolean)">
            <summary>
            Finds the vertices on the convex hull and optionally converts them to the TVertex array.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <param name="onlyCompute"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.GetConvexFacesInternal``2">
            <summary>
            Finds the convex hull and creates the TFace objects.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TFace"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.GetConvexFacesInternal``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            This is used by the Delaunay triangulation code.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TFace"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.ConvexHullInternal.GetConvexHullAndFaces``2(System.Collections.Generic.IEnumerable{MIConvexHull.IVertex})">
            <summary>
            This is called by the "ConvexHull" class.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TFace"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:MIConvexHull.IVertex">
            <summary>
            An interface for a structure with nD position.
            </summary>
        </member>
        <member name="P:MIConvexHull.IVertex.Position">
            <summary>
            Position of the vertex.
            </summary>
        </member>
        <member name="T:MIConvexHull.DefaultVertex">
            <summary>
            "Default" vertex.
            </summary>
        </member>
        <member name="P:MIConvexHull.DefaultVertex.Position">
            <summary>
            Position of the vertex.
            </summary>
        </member>
        <member name="T:MIConvexHull.MathHelper">
            <summary>
            A helper class mostly for normal computation. If convex hulls are computed
            in higher dimensions, it might be a good idea to add a specific
            FindNormalVectorND function.
            </summary>
        </member>
        <member name="M:MIConvexHull.MathHelper.GaussElimination(System.Int32,System.Double[][],System.Double[],System.Double[])">
            <summary>
            does gaussian elimination.
            </summary>
            <param name="nDim"></param>
            <param name="pfMatr"></param>
            <param name="pfVect"></param>
            <param name="pfSolution"></param>
        </member>
        <member name="M:MIConvexHull.MathHelper.LengthSquared(System.Double[])">
            <summary>
            Squared length of the vector.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.MathHelper.SubtractFast(System.Double[],System.Double[],System.Double[])">
            <summary>
            Subtracts vectors x and y and stores the result to target.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="target"></param>
        </member>
        <member name="M:MIConvexHull.MathHelper.FindNormalVector4D(MIConvexHull.VertexWrap[],System.Double[])">
            <summary>
            Finds 4D normal vector.
            </summary>
            <param name="vertices"></param>
            <param name="normal"></param>
        </member>
        <member name="M:MIConvexHull.MathHelper.FindNormalVector3D(MIConvexHull.VertexWrap[],System.Double[])">
            <summary>
            Finds 3D normal vector.
            </summary>
            <param name="vertices"></param>
            <param name="normal"></param>
        </member>
        <member name="M:MIConvexHull.MathHelper.FindNormalVector2D(MIConvexHull.VertexWrap[],System.Double[])">
            <summary>
            Finds 2D normal vector.
            </summary>
            <param name="vertices"></param>
            <param name="normal"></param>
        </member>
        <member name="M:MIConvexHull.MathHelper.FindNormalVector(MIConvexHull.VertexWrap[],System.Double[])">
            <summary>
            Finds normal vector of a hyper-plane given by vertices.
            Stores the results to normalData.
            </summary>
            <param name="vertices"></param>
            <param name="normalData"></param>
        </member>
        <member name="M:MIConvexHull.MathHelper.GetVertexDistance(MIConvexHull.VertexWrap,MIConvexHull.ConvexFaceInternal)">
            <summary>
            Check if the vertex is "visible" from the face.
            The vertex is "over face" if the return value is > Constants.PlaneDistanceTolerance.
            </summary>
            <param name="v"></param>
            <param name="f"></param>
            <returns>The vertex is "over face" if the result is positive.</returns>
        </member>
        <member name="T:MIConvexHull.ObjectManager">
            <summary>
            A helper class for object allocation/storage. 
            This helps the GC a lot as it prevents the creation of about 75% of 
            new face objects (in the case of ConvexFaceInternal). In the case of
            FaceConnectors and DefferedFaces, the difference is even higher (in most
            cases O(1) vs O(number of created faces)). 
            </summary>
        </member>
        <member name="T:MIConvexHull.DelaunayTriangulation`2">
            <summary>
            Calculation and representation of Delaunay triangulation.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TCell"></typeparam>
        </member>
        <member name="T:MIConvexHull.ITriangulation`2">
            <summary>
            Simple interface to unify different types of triangulations in the future.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TCell"></typeparam>
        </member>
        <member name="M:MIConvexHull.DelaunayTriangulation`2.Create(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates the Delaunay triangulation of the input data.
            Be careful with concurrency, because during the computation, the vertex position arrays get resized.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.DelaunayTriangulation`2.#ctor">
            <summary>
            Can only be created using a factory method.
            </summary>
        </member>
        <member name="P:MIConvexHull.DelaunayTriangulation`2.Cells">
            <summary>
            Cells of the triangulation.
            </summary>
        </member>
        <member name="T:MIConvexHull.Triangulation">
            <summary>
            Factory class for creating triangulations.
            </summary>
        </member>
        <member name="M:MIConvexHull.Triangulation.CreateDelaunay``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates the Delaunay triangulation of the input data.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.Triangulation.CreateDelaunay(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Creates the Delaunay triangulation of the input data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.Triangulation.CreateDelaunay``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates the Delaunay triangulation of the input data.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TFace"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:MIConvexHull.TriangulationCell`2">
            <summary>
            Representation of the triangulation cell. Pretty much the same as ConvexFace,
            just wanted to distinguish the two.
            To declare your own face type, use class Face : DelaunayFace(of Vertex, of Face)
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TCell"></typeparam>
        </member>
        <member name="T:MIConvexHull.DefaultTriangulationCell`1">
            <summary>
            Default triangulation cell.
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="T:MIConvexHull.VoronoiEdge`2">
            <summary>
            A class representing an (undirected) edge of the Voronoi graph.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TCell"></typeparam>
        </member>
        <member name="M:MIConvexHull.VoronoiEdge`2.Equals(System.Object)">
            <summary>
            ...
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.VoronoiEdge`2.GetHashCode">
            <summary>
            ...
            </summary>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.VoronoiEdge`2.#ctor">
            <summary>
            Create an instance of the edge.
            </summary>
        </member>
        <member name="M:MIConvexHull.VoronoiEdge`2.#ctor(`1,`1)">
            <summary>
            Create an instance of the edge.
            </summary>
        </member>
        <member name="P:MIConvexHull.VoronoiEdge`2.Source">
            <summary>
            Source of the edge.
            </summary>
        </member>
        <member name="P:MIConvexHull.VoronoiEdge`2.Target">
            <summary>
            Target of the edge.
            </summary>
        </member>
        <member name="T:MIConvexHull.VoronoiMesh">
            <summary>
            A factory class for creating a Voronoi mesh.
            </summary>
        </member>
        <member name="M:MIConvexHull.VoronoiMesh.Create``3(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TCell"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.VoronoiMesh.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.VoronoiMesh.Create(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MIConvexHull.VoronoiMesh.Create``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create the voronoi mesh.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TCell"></typeparam>
            <typeparam name="TEdge"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:MIConvexHull.VoronoiMesh`3">
            <summary>
            A representation of a voronoi mesh.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TCell"></typeparam>
            <typeparam name="TEdge"></typeparam>
        </member>
        <member name="M:MIConvexHull.VoronoiMesh`3.Create(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a Voronoi diagram of the input data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MIConvexHull.VoronoiMesh`3.#ctor">
            <summary>
            Can only be created using a factory method.
            </summary>
        </member>
        <member name="P:MIConvexHull.VoronoiMesh`3.Vertices">
            <summary>
            Vertices of the diagram.
            </summary>
        </member>
        <member name="P:MIConvexHull.VoronoiMesh`3.Edges">
            <summary>
            Edges connecting the cells. 
            The same information can be retrieved Cells' Adjacency.
            </summary>
        </member>
        <member name="T:MIConvexHull.VoronoiMesh`3.EdgeComparer">
            <summary>
            This is probably not needed, but might make things a tiny bit faster.
            </summary>
        </member>
    </members>
</doc>
